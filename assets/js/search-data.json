{
  
    
        "post0": {
            "title": "Webapi Interview Notes 2",
            "content": "WCF: . ABC in WCF: | | Address: This lets you know the location on server. Different bindings support different address types. . | Binding: Defines which protocol is being used. . | Contract: This defines each method exposed from service. . Contract: | | . ServiceContract . | OperationContract . | DataContract . | MessageContract . BINDING: | | . HTTP-based: If we want our service to be accessed across multiple OS or multiple programming architectures, HTTP based bindings are our obvious choice. Let’s see the bindings supported. . BasicHttpBinding: It is used in case of web service, offers backward compatibility, the message encoding used is Text/XML, supports WS-basic profile. . | WsHttpBinding: It gives all functionality which BasicHttpBinding offers, apart from that it offers transaction support, reliable message and WS-Addressing. . | WSDualHttpBinding: Offers all functionality offered by WsHttpBinding, but the main purpose is to be used with duplex communication. . | WsFederationHttpBinding: This is used when security within the organization is the most important aspect. . | . | TCP-based: If we want to share the data in compact binary format, these bindings are of best use. . NetNamedPipeBinding: This is best binding to be used if our service and client both are hosted on the same machine, use TCP protocol to exchange data. It supports transaction, reliable session and secure communication. . | NetPeerTcpBinding: This binding provided secure binding for P2P network, offers all functionality fro NetNamedPipeBinding. . | NetTcpBinding: Used for secure and optimized binding for cross-machine communication between .NET application. . | . | . MSMQ-based: If we want to use MSMQ server to exchange data, we can use these bindings: . MsmqIntegrationBinding: We can use this binding to send and receive data from existing MSMQ applications that use COM, C++. . | NetMsmqBinding: This is used to communicate between cross-machine using queue. This is preferred binding when using MSMQ. . | . | . Exception handling: | Wcf exception handling – fault exception . Wep api exception handling – custom exception .",
            "url": "https://lkgforit.com/2020/12/23/Webapi-Interview-Notes-2.html",
            "relUrl": "/2020/12/23/Webapi-Interview-Notes-2.html",
            "date": " • Dec 23, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Webapi Interview Notes",
            "content": "Web api . http protocol | . | controller – action – routing . | (GET/POST/PUT/PATCH/DELETE) . | . Eg: . [HttpPost] . public void SaveNewValue([FromBody]string value) . { . } . Codes are grouped into five categories based upon the first number. . S. No. HTTP Status Code Description . 1. | 1XX | Informational | . 2. | 2XX | Success | . 3. | 3XX | Redirection | . 4. | 4XX | Client-Side Error | . 5. | 5XX | Server-Side Error | . Table: HTTP Status Code with Description . Some of the commonly seen HTTP Status Codes are: 200 (Request is Ok), 201 (Created), 202 (Accepted), 204 (No Content), 301 (Moved Permanently), 400 (Bad Request), 401 (Unauthorized), 403 (Forbidden), 404 (Not Found), 500 (Internal Server Error), 502 (Bad Gateway), 503 (Service Unavailable) etc. . Difference between Web API and MVC controller | Web API Controller MVC Controller . Derives from System.Web.Http.ApiController class | Derives from System.Web.Mvc.Controller class. | . Method name must start with Http verbs otherwise apply http verbs attribute. | Must apply appropriate Http verbs attribute. | . Specialized in returning data. | Specialized in rendering view. | . Return data automatically formatted based on Accept-Type header attribute. Default to json or xml. | Returns ActionResult or any derived type. | . Requires .NET 4.0 or above | Requires .NET 3.5 or above | . ASP.NET Web API vs WCF | Web API WCF . Open source and ships with .NET framework. | Ships with .NET framework | . Supports only HTTP protocol. | Supports HTTP, TCP, UDP and custom transport protocol. | . Maps http verbs to methods | Uses attributes based programming model. | . Uses routing and controller concept similar to ASP.NET MVC. | Uses Service, Operation and Data contracts. | . Does not support Reliable Messaging and transaction. | Supports Reliable Messaging and Transactions. | . Web API can be configured using HttpConfiguration class but not in web.config. | Uses web.config and attributes to configure a service. | . Ideal for building RESTful services. | Supports RESTful services but with limitations. | . OData | The Open Data Protocol (OData) is a data access protocol for the web. OData provides a uniform way to query and manipulate data sets through CRUD operations (create, read, update, and delete). . | OData defines parameters that can be used to modify an OData query. The client sends these parameters in the query string of the request URI. For example, to sort the results, a client uses the $orderby parameter: . | http://localhost/Products?$orderby=Name . | The OData specification calls these parameters query options. You can enable OData query options for any Web API controller in your project — the controller does not need to be an OData endpoint. This gives you a convenient way to add features such as filtering and sorting to any Web API application. . | Web API 5.2 . | OData v4 . | Visual Studio 2017 (download Visual Studio 2017 here) . | Entity Framework 6 . | .NET 4.7.2 . | . ## . Configure the OData endpoint . Open the file App_Start/WebApiConfig.cs. Add the following using statements: . C#Copy . using ProductService.Models; . using Microsoft.AspNet.OData.Builder; . using Microsoft.AspNet.OData.Extensions; . Then add the following code to the Register method: . C#Copy . public static class WebApiConfig . { . public static void Register(HttpConfiguration config) . { . // New code: . ODataModelBuilder builder = new ODataConventionModelBuilder(); . builder.EntitySet&lt;Product&gt;(“Products”); . config.MapODataServiceRoute( . routeName: “ODataRoute”, . routePrefix: null, . model: builder.GetEdmModel()); . } . } . Inherits odatacontroller: . public class ProductsController : ODataController . public async Task&lt;IHttpActionResult&gt; Patch([FromODataUri] int key, Delta&lt;Product&gt; product) . { . OData supports two different semantics for updating an entity, PATCH and PUT. . PATCH performs a partial update. The client specifies just the properties to update. . | PUT replaces the entire entity. . Query Options | | . The following are the OData query options that ASP.NET WebAPI supports: . $orderby: Sorts the fetched record in particular order like ascending or descending. | . ?$orderby=ProductName desc . $orderby=ProductName asc . $select: Selects the columns or properties in the result set. Specifies which all attributes or properties to include in the fetched result. . | $skip: Used to skip the number of records or results. For example, I want to skip first 100 records from the database while fetching complete table data, then I can make use of $skip. . | . $top=5&amp;$skip=3 . $orderby=ProductName asc &amp;$skip=6 . $top: Fetches only top n records. For e.g. I want to fetch top 10 records from the database, then my particular service should be OData enabled to support $top query option. -  ”?$top=2” | . $orderby=ProductId asc&amp;$top=5 . $expand: Expands the related domain entities of the fetched entities. . | $filter: Filters the result set based on certain conditions, it is like where clause of LINQ. For e.g. I want to fetch the records of 50 students who have scored more than 90% marks, and then I can make use of this query option. . | . $filter=ProductName eq ‘computer’ . $filter=ProductId lt 3 . $filter=ProductId ge 3 and ProductId le 5 . $filter=substringof(‘IPhone’,ProductName) . $inlinecount: This query option is mostly used for pagination at client side. It tells the count of total entities fetched from the server to the client. | . [Queryable] . [GET(“allproducts”)] . [GET(“all”)] . public HttpResponseMessage Get() . { . var products = _productServices.GetAllProducts().AsQueryable(); . var productEntities = products as List&lt;ProductEntity&gt; ?? products.ToList(); . if (productEntities.Any()) . return Request.CreateResponse(HttpStatusCode.OK, productEntities.AsQueryable()); . throw new ApiDataException(1000, “Products not found”, HttpStatusCode.NotFound); . } . Standard filter operators | The Web API supports the standard OData filter operators listed in the following table. . Operator Description Example . Comparison Operators |   |   | . Eq | Equal | $filter=revenue eq 100000 | . Ne | Not Equal | $filter=revenue ne 100000 | . Gt | Greater than | $filter=revenue gt 100000 | . Ge | Greater than or equal | $filter=revenue ge 100000 | . Lt | Less than | $filter=revenue lt 100000 | . Le | Less than or equal | $filter=revenue le 100000 | . Logical Operators |   |   | . And | Logical and | $filter=revenue lt 100000 and revenue gt 2000 | . Or | Logical or | $filter=contains(name,’(sample)’) or contains(name,’test’) | . Not | Logical negation | $filter=not contains(name,’sample’) | . Grouping Operators |   |   | . ( ) | Precedence grouping | (contains(name,’sample’) or contains(name,’test’)) and revenue gt 5000 | . Standard query functions | The web API supports these standard OData string query functions. . Function Example . contains | $filter=contains(name,’(sample)’) | . endswith | $filter=endswith(name,’Inc.’) | . startswith | $filter=startswith(name,’a’) | . Paging: . [Queryable(PageSize = 10)] . Query Constraints: | [Queryable(AllowedQueryOptions =AllowedQueryOptions.Filter | AllowedQueryOptions.OrderBy)] | . [GET(“allproducts”)] . [GET(“all”)] . public HttpResponseMessage Get() .",
            "url": "https://lkgforit.com/2020/12/23/WebApi-Interview-Notes.html",
            "relUrl": "/2020/12/23/WebApi-Interview-Notes.html",
            "date": " • Dec 23, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Unittesting Interview Notes",
            "content": "Unit Testing | Unit Test . namespace WebAPI.Tests   . | {   . |     using Microsoft.VisualStudio.TestTools.UnitTesting;   . |     using System.Net.Http;   . |     using System.Web.Http;   . |     using WebAPI.Controllers;   . |     using WebAPI.Models;   . |     [TestClass]   . |     publicclassEmployeeUnitTest   . |     {   . |         [TestMethod]   . |         publicvoid EmployeeGetById()   . |         {   . |             // Set up Prerequisites    . |             var controller = new EmployeeController();   . |             controller.Request = new HttpRequestMessage();   . |             controller.Configuration = new HttpConfiguration();   . |             // Act on Test   . |             var response = controller.Get(1);   . |             // Assert the result   . |             Employee employee;   . |             Assert.IsTrue(response.TryGetContentValue &lt; Employee &gt; (out employee));   . |             Assert.AreEqual(“Jignesh”, employee.Name);   . |         }   . |     }   . | }   . | OKNegotiatedContentResult&lt;T&gt; - for HttpAction result . var response = controller.Get(1);   . |             var contentResult = response as OkNegotiatedContentResult&lt;Department&gt;;   . |             // Assert the result   . |             Assert.IsNotNull(contentResult);   . |             Assert.IsNotNull(contentResult.Content);   . |             Assert.AreEqual(1, contentResult.Content.DepartmentId);   . | Assert.AreEqual(“DefaultApi”, createdResult.RouteName);   . |     Assert.IsNotNull(createdResult.RouteValues[“id”]);   . | Assert.AreEqual(HttpStatusCode.Accepted, contentResult.StatusCode);   . NUnit testing: MOK framework . using MVC5_Testing_1.ModelAccess; . using NUnit.Framework; .   . namespace MVCModelTest . { .     [TestFixture] .     public class CheckDepartmentTest .     { .         [Test] .         public void CheckDepartmentExist() .         { .             var obj = new DepartmentAccess(); .   .             var Res = obj.CheckDeptExist(10); .   .             Assert.That(Res, Is.True); .         } .     } . } . [Test] . public void CheckDepartmentExistWithMoq() . { .     //Create Fake Object .     var fakeObject = new Mock&lt;IDepartmentAccess&gt;(); .     //Set the Mock Configuration .     //The CheckDeptExist() method is call is set with the Integer parameter type .     //The Configuration also defines the Return type from the method  .     fakeObject.Setup(x =&gt; x.CheckDeptExist(It.IsAny&lt;int&gt;())).Returns(true); .     //Call the methid .     var Res = fakeObject.Object.CheckDeptExist(10); .   .     Assert.That(Res,Is.True); . } .",
            "url": "https://lkgforit.com/2020/12/23/UnitTesting-Interview-Notes.html",
            "relUrl": "/2020/12/23/UnitTesting-Interview-Notes.html",
            "date": " • Dec 23, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Solid Design Principles Interview Notes",
            "content": "SOLID Design Principles Explained - C# . In Object Oriented Programming (OOP), SOLID is an acronym, introduced by Michael Feathers, for five design principles used to make software design more understandable, flexible, and maintainable. . There are five SOLID principles: . Single Responsibility Principle (SRP) . | Open Closed Principle (OCP) . | Liskov Substitution Principle (LSP) . | Interface Segregation Principle (ISP) . | Dependency Inversion Principle (DIP) . | Single Responsibility Principle (SRP) . Definition: A class should have only one reason to change. . In layman terminology, this means that a class should not be loaded with multiple responsibilities and a single responsibility should not be spread across multiple classes or mixed with other responsibilities. The reason is that more changes requested in the future, the more changes the class need to apply. . Understanding . In simple terms, a module or class should have a very small piece of responsibility in the entire application. Or as it states, a class/module should have not more than one reason to change. . If a class has only a single responsibility, it is likely to be very robust. It’s easy to verify its working as per logic defined. And it’s easy to change in class as it has single responsibility. . The Single Responsibility Principle provides another benefit. Classes, software components and modules that have only one responsibility are much easier to explain, implement and understand than ones that give a solution for everything. . This also reduces number of bugs and improves development speed and most importantly makes developer’s life lot easier. . Open Closed Principle (OCP) . Definition: Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification. . Understanding . This principle suggests that the class should be easily extended but there is no need to change its core implementations. . The application or software should be flexible to change. How change management is implemented in a system has a significant impact on the success of that application/ software. The OCP states that the behaviors of the system can be extended without having to modify its existing implementation. . i.e. New features should be implemented using the new code, but not by changing existing code. The main benefit of adhering to OCP is that it potentially streamlines code maintenance and reduces the risk of breaking the existing implementation. . Implementation . Let’s take an example of bank accounts like regular savings, salary saving, corporate etc. for different customers. As for each customer type, there are different rules and different interest rates. The code below violates OCP principle if the bank introduces a new Account type. Said code modifies this method for adding a new account type. . We can apply OCP by using interface, abstract class, abstract methods and virtual methods when you want to extend functionality. Here I have used interface for example only but you can go as per your requirement. . interface IAccount . { . // members and function declaration, properties . decimal Balance { get; set; } . decimal CalcInterest(); . } . //regular savings account . public class RegularSavingAccount : IAccount . { . public decimal Balance { get; set; } = 0; . public decimal CalcInterest() . { . decimal Interest = (Balance * 4) / 100; . if (Balance &lt; 1000) Interest -= (Balance * 2) / 100; . if (Balance &lt; 50000) Interest += (Balance * 4) / 100; . return Interest; . } . } . //Salary savings account . public class SalarySavingAccount : IAccount . { . public decimal Balance { get; set; } = 0; . public decimal CalcInterest() . { . decimal Interest = (Balance * 5) / 100; . return Interest; . } . } . //Corporate Account . public class CorporateAccount : IAccount . { . public decimal Balance { get; set; } = 0; . public decimal CalcInterest() . { . decimal Interest = (Balance * 3) / 100; . return Interest; . } . } . In the above code three new classes are created; regular saving account, SalarySavingAccount, and CorporateAccount, by extending them from IAccount. . This solves the problem of modification of class and by extending interface, we can extend functionality. . Above code is implementing both OCP and SRP principle, as each class has single is doing a single task and we are not modifying class and only doing an extension. . Liskov Substitution Principle (LSP) . Definition by Robert C. Martin: Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it. . The Liskov substitution principle (LSP) is a definition of a subtyping relation, called (strong) behavioral subtyping, that was initially introduced by Barbara Liskov in a 1987 conference keynote address titled Data abstraction and hierarchy. . Understanding . LSP states that the child class should be perfectly substitutable for their parent class. If class C is derived from P then C should be substitutable for P. . We can check using LSP that inheritance is applied correctly or not in our code. . LSP is a fundamental principle of SOLID Principles and states that if program or module is using base class then derived class should be able to extend their base class without changing their original implementation. . Implementation . Let’s consider the code below where LSP is violated. We cannot simply substitute a Triangle, which results in printing shape of a triangle, with Circle. . namespace Demo . { . public class Program . { . static void Main(string[] args) . { . Triangle triangle = new Circle(); . Console.WriteLine(triangle.GetColor()); . } . } . public class Triangle . { . public virtual string GetShape() . { . return “ Triangle “; . } . } . public class Circle : Triangle . { . public override string GetShape() . { . return “Circle”; . } . } . } . To correct above implementation, we need to refactor this code by introducing interface with method called GetShape. . namespace Demo . { . class Program . { . static void Main(string[] args) . { . Shape shape = new Circle(); . Console.WriteLine(shape.GetShape()); . shape = new Triangle (); . Console.WriteLine(shape.GetShape()); . } . } . public abstract class Shape . { . public abstract string GetShape(); . } . public class Triangle: Fruit . { . public override string GetShape() . { . return “Triangle”; . } . } . public class Circle : Triangle . { . public override string GetShape() . { . return “Circle”; . } . } . } . Interface Segregation Principle (ISP) . Definition: No client should be forced to implement methods which it does not use, and the contracts should be broken down to thin ones. . Understanding . Interface segregation principle is required to solve the design problem of the application. When all the tasks are done by a single class or in other words, one class is used in almost all the application classes then it has become a fat class with overburden. Inheriting such class will results in having sharing methods which are not relevant to derived classes but its there in the base class so that will inherit in the derived class. . Using ISP, we can create separate interfaces for each operation or requirement rather than having a single class to do the same work. . Implementation . In below code, ISP is broken as process method is not required by OfflineOrder class but is forced to implement. . public interface IOrder . { . void AddToCart(); . void CCProcess(); . } . public class OnlineOrder : IOrder . { . public void AddToCart() . { . //Do Add to Cart . } . public void CCProcess() . { . //process through credit card . } . } . public class OfflineOrder : IOrder . { . public void AddToCart() . { . //Do Add to Cart . } . public void CCProcess() . { . //Not required for Cash/ offline Order . throw new NotImplementedException(); . } . } . We can resolve this violation by dividing IOrder Interface. . public interface IOrder . { . void AddToCart(); . } . public interface IOnlineOrder . { . void CCProcess(); . } . public class OnlineOrder : IOrder, IOnlineOrder . { . public void AddToCart() . { . //Do Add to Cart . } . public void CCProcess() . { . //process through credit card . } . } . public class OfflineOrder : IOrder . { . public void AddToCart() . { . //Do Add to Cart . } . } .",
            "url": "https://lkgforit.com/2020/12/23/Solid-Design-Principles-Interview-Notes.html",
            "relUrl": "/2020/12/23/Solid-Design-Principles-Interview-Notes.html",
            "date": " • Dec 23, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Sql Interview Notes",
            "content": "SQL: | SQL is Structured Query Language, which is a computer language for storing, manipulating and retrieving data stored in a relational database. . SQL is the standard language for Relational Database System. . DDL - Data Definition Language . Sr.No. Command &amp; Description . 1 | CREATE . Creates a new table, a view of a table, or other object in the database. . | . 2 | ALTER . Modifies an existing database object, such as a table. . | . 3 | DROP . Deletes an entire table, a view of a table or other objects in the database. . | . DML - Data Manipulation Language . Sr.No. Command &amp; Description . 1 | SELECT . Retrieves certain records from one or more tables. . | . 2 | INSERT . Creates a record. . | . 3 | UPDATE . Modifies records. . | . 4 | DELETE . Deletes records. . | . DCL - Data Control Language . Sr.No. Command &amp; Description . 1 | GRANT . Gives a privilege to user. . | . 2 | REVOKE . Takes back privileges granted from user. . | . Constraints: | Following are some of the most commonly used constraints available in SQL − . NOT NULL Constraint − Ensures that a column cannot have a NULL value. . | DEFAULT Constraint − Provides a default value for a column when none is specified. . | UNIQUE Constraint − Ensures that all the values in a column are different. . | PRIMARY Key − Uniquely identifies each row/record in a database table. . | FOREIGN Key − Uniquely identifies a row/record in any another database table. . | CHECK Constraint − The CHECK constraint ensures that all values in a column satisfy certain conditions. . | INDEX − Used to create and retrieve data from the database very quickly. . SYNTAX: | | . SQL SELECT Statement . SELECT column1, column2….columnN . FROM table_name; . SQL DISTINCT Clause . SELECT DISTINCT column1, column2….columnN . FROM table_name; . SQL WHERE Clause . SELECT column1, column2….columnN . FROM table_name . WHERE CONDITION; . SQL AND/OR Clause . SELECT column1, column2….columnN . FROM table_name . WHERE CONDITION-1 {AND | OR} CONDITION-2; | . SQL IN Clause . SELECT column1, column2….columnN . FROM table_name . WHERE column_name IN (val-1, val-2,…val-N); . SQL BETWEEN Clause . SELECT column1, column2….columnN . FROM table_name . WHERE column_name BETWEEN val-1 AND val-2; . SQL LIKE Clause . SELECT column1, column2….columnN . FROM table_name . WHERE column_name LIKE { PATTERN }; . SQL ORDER BY Clause . SELECT column1, column2….columnN . FROM table_name . WHERE CONDITION . ORDER BY column_name {ASC | DESC}; | . SQL GROUP BY Clause . SELECT SUM(column_name) . FROM table_name . WHERE CONDITION . GROUP BY column_name; . SQL COUNT Clause . SELECT COUNT(column_name) . FROM table_name . WHERE CONDITION; . SQL HAVING Clause . SELECT SUM(column_name) . FROM table_name . WHERE CONDITION . GROUP BY column_name . HAVING (arithematic function condition); . SQL CREATE TABLE Statement . CREATE TABLE table_name( . column1 datatype, . column2 datatype, . column3 datatype, . ….. . columnN datatype, . PRIMARY KEY( one or more columns ) . ); . SQL DROP TABLE Statement . DROP TABLE table_name; . SQL CREATE INDEX Statement . CREATE UNIQUE INDEX index_name . ON table_name ( column1, column2,…columnN); . SQL DROP INDEX Statement . ALTER TABLE table_name . DROP INDEX index_name; . SQL DESC Statement . DESC table_name; . SQL TRUNCATE TABLE Statement . TRUNCATE TABLE table_name; . SQL ALTER TABLE Statement . ALTER TABLE table_name {ADD | DROP | MODIFY} column_name {data_ype}; | . SQL ALTER TABLE Statement (Rename) . ALTER TABLE table_name RENAME TO new_table_name; . SQL INSERT INTO Statement . INSERT INTO table_name( column1, column2….columnN) . VALUES ( value1, value2….valueN); . SQL UPDATE Statement . UPDATE table_name . SET column1 = value1, column2 = value2….columnN=valueN . [ WHERE CONDITION ]; . SQL DELETE Statement . DELETE FROM table_name . WHERE {CONDITION}; . SQL CREATE DATABASE Statement . CREATE DATABASE database_name; . SQL DROP DATABASE Statement . DROP DATABASE database_name; . SQL USE Statement . USE database_name; . SQL COMMIT Statement . COMMIT; . SQL ROLLBACK Statement . ROLLBACK; . SQL Logical Operators . Here is a list of all the logical operators available in SQL. . Show Examples . Sr.No. Operator &amp; Description . 1 | ALL . The ALL operator is used to compare a value to all values in another value set. . | . 2 | AND . The AND operator allows the existence of multiple conditions in an SQL statement&#39;s WHERE clause. . | . 3 | ANY . The ANY operator is used to compare a value to any applicable value in the list as per the condition. . | . 4 | BETWEEN . The BETWEEN operator is used to search for values that are within a set of values, given the minimum value and the maximum value. . | . 5 | EXISTS . The EXISTS operator is used to search for the presence of a row in a specified table that meets a certain criterion. . | . 6 | IN . The IN operator is used to compare a value to a list of literal values that have been specified. . | . 7 | LIKE . The LIKE operator is used to compare a value to similar values using wildcard operators. . | . 8 | NOT . The NOT operator reverses the meaning of the logical operator with which it is used. Eg: NOT EXISTS, NOT BETWEEN, NOT IN, etc. This is a negate operator. . | . 9 | OR . The OR operator is used to combine multiple conditions in an SQL statement&#39;s WHERE clause. . | . 10 | IS NULL . The NULL operator is used to compare a value with a NULL value. . | . 11 | UNIQUE . The UNIQUE operator searches every row of a specified table for uniqueness (no duplicates). . | . Create Table syntax: | The basic syntax of the CREATE TABLE statement is as follows − . CREATE TABLE table_name( . column1 datatype, . column2 datatype, . column3 datatype, . ….. . columnN datatype, . PRIMARY KEY( one or more columns ) . ); . The SQL INSERT INTO syntax will be as follows − . INSERT INTO TABLE_NAME VALUES (value1,value2,value3,…valueN); . The basic syntax of the UPDATE query with a WHERE clause is as follows − . UPDATE table_name . SET column1 = value1, column2 = value2…., columnN = valueN . WHERE [condition]; . DELETE FROM table_name . WHERE [condition]; . The basic syntax of % and _ is as follows − . SELECT FROM table_name . WHERE column LIKE ‘XXXX%’ . or . SELECT FROM table_name . WHERE column LIKE ‘%XXXX%’ . or . SELECT FROM table_name . WHERE column LIKE ‘XXXX_’ . or . SELECT FROM table_name . WHERE column LIKE ‘_XXXX’ . or . SELECT FROM table_name . WHERE column LIKE ‘_XXXX_’ . The basic syntax of the TOP clause with a SELECT statement would be as follows. . SELECT TOP number | percent column_name(s) | . FROM table_name . WHERE [condition] . GROUP BY clause must follow the conditions in the WHERE clause and must precede the ORDER BY clause if one is used. . SELECT column1, column2 . FROM table_name . WHERE [ conditions ] . GROUP BY column1, column2 . ORDER BY column1, column2 . The basic syntax of DISTINCT keyword to eliminate the duplicate records is as follows − . SELECT DISTINCT column1, column2,…..columnN . FROM table_name . WHERE [condition] . JOINS: . There are different types of joins available in SQL − . INNER JOIN − returns rows when there is a match in both tables. . | LEFT JOIN − returns all rows from the left table, even if there are no matches in the right table. . | RIGHT JOIN − returns all rows from the right table, even if there are no matches in the left table. . | FULL JOIN − returns rows when there is a match in one of the tables. . | SELF JOIN − is used to join a table to itself as if the table were two tables, temporarily renaming at least one table in the SQL statement. . | CARTESIAN JOIN − returns the Cartesian product of the sets of records from the two or more joined tables. . | . INDEX: . Single-Column Indexes . A single-column index is created based on only one table column. The basic syntax is as follows. . CREATE INDEX index_name . ON table_name (column_name); . Unique Indexes . Unique indexes are used not only for performance, but also for data integrity. A unique index does not allow any duplicate values to be inserted into the table. The basic syntax is as follows. . CREATE UNIQUE INDEX index_name . on table_name (column_name); . Composite Indexes . A composite index is an index on two or more columns of a table. Its basic syntax is as follows. . CREATE INDEX index_name . on table_name (column1, column2); . Implicit Indexes . Implicit indexes are indexes that are automatically created by the database server when an object is created. Indexes are automatically created for primary key constraints and unique constraints. . RANK: . We have the following rank functions. . ROW_NUMBER() -ROW_Number() SQL RANK function to get a unique sequential number for each row | . . RANK() | . . DENSE_RANK() -  if we have duplicate values, SQL assigns different ranks to those rows as well. Ideally, we should get the same rank for duplicate or similar values. | . . NTILE() | . Using SQL Server RANK() function over a result set example . SELECT . product_id, . product_name, . list_price, . RANK () OVER ( . ORDER BY list_price DESC . ) price_rank . FROM . production.products; . Here is the result set: . .",
            "url": "https://lkgforit.com/2020/12/23/SQL-Interview-Notes.html",
            "relUrl": "/2020/12/23/SQL-Interview-Notes.html",
            "date": " • Dec 23, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "Interview Notes Dotnet",
            "content": "1.What is .NET? . NET is an integral part of many applications running on Windows and provides common functionality for those applications to run. This download is for people who need .NET to run an application on their computer. For developers, the .NET Framework provides a comprehensive and consistent programming model for building applications that have visually stunning user experiences and seamless and secure communication. . 2.How many languages .NET is supporting now? . When .NET was introduced it came with several languages. . VB.NET, . C#, . COBOL . and . Perl, etc. . What is the difference between Response.Redirect and Server.Transfer? . Response.Redirect basically redirects the user’s browser to another page or site. The history of the user’s browser is updated to reflect the new address as well. It also performs a trip back to the client where the client’s browser is redirected to the new page. . Whereas, Server.Transfer transfers from one page to the other without making any round-trip back to the client’s browser. The history does not get updated in the case of Server.Transfer. . Class Object . Class is the definition of an object | An object is an instance of a class. | . It is a template of the object | A class does not become an object unless instantiated | . It describes all the methods, properties, etc | An object is used to access all those properties from the class. | . what do you know about boxing and unboxing? . Boxing Unboxing . Implicit | Explicit | . Converting a value type to the type object | Extracting the value type from the object | . eg : obj myObject = i; | eg : i = (int)myObject; | . Differentiate between constants and read-only variables. . Constants Read-only Variables . Evaluated at compile time | Evaluated at run-time | . Support only value type variables | They can hold the reference type variables | . They are used when the value is not changing at compile time | Used when the actual value is unknown before the run-time | . Cannot be initialized at the time of declaration or in a constructor | Can be initialized at the time of declaration or in a constructor | . From which base class all web Forms are inherited? . All web forms are inherited from page class. . What are the different types of constructors in c#? . Following are the types of constructors in C#: . Default Constructor . | Parameterized constructor . | Copy Constructor . |  public class Employee   . |     {   . |        public string firstName;   . |        public string lastName;   . |        public string position;   . |        public int salary;   . |         public Employee()   . |         {   . |                    . |         }   . |         // Copy constructor.   . |         public Employee(Employee employee)   . |         {   . |             firstName = employee.firstName;   . |             lastName  = employee.lastName;   . |             position  = employee.position;   . |             salary    = employee.salary;   . |         }   . |    . |     }   . | Static Constructor . | . Characteristic of static constructor . A static constructor does not take any access modifiers. . | A static constructor does not have a parameter. . | A static constructor is called automatically to initialize the class before the first instance is created or any static members are referenced. . | A static constructor cannot be called directly. . | The user has no control over when the static constructor is executed in the program. . | A typical use of static constructors is when the class is using a log file and the constructor is used to write entries to this file. . | A class can have only one static constructor. . | It can access only static members of a class. . | Private Constructor | . A private constructor is a special instance constructor. It is generally used in classes that contain static members only. If a class has one or more private constructors and no public constructors, other classes (except nested classes) cannot create instances of this class. The use of private constructor is to serve singleton classes. A singleton class is one which limits the number of objects created to one. Using private constructor we can ensure that no more than one object can be created at a time . One use of private constructor is when we have the only static member. . | It provides the implementation of singleton class pattern. . | Once we provide constructor (private/public/any) the compiler will not add the no parameter public constructor to any class. . | . use of static constructor. Why and when would we create a static constructor and is it possible to overload one? . No you can’t overload it; a static constructor is useful for initializing any static fields associated with a type (or any other per-type operations) - useful in particular for reading required configuration data into readonly fields, etc. . It is run automatically by the runtime the first time it is needed (the exact rules there are complicated (see “beforefieldinit”) and changed subtly between CLR2 and CLR4). Unless you abuse reflection, it is guaranteed to run at most once (even if two threads arrive at the same time). . List the events in the page life cycle. . Following are the events in the page life cycle: . Page_PreInit . | Page_Init . | Page_InitComplete . | Page_PreLoad . | Page_Load . | Page_LoadComplete . | Page_PreRender . | Render . | What is the code to send an email from an ASP.NET application? . | . 1 . 2 . 3 . 4 . 5 . 6 . 7 . 8 . | mail message = new mail(); . message.From = &quot;abc@gmail.com&quot;; . message.To = &quot;xyz@gmail.com&quot;; . message.Subject = &quot;Test&quot;; . message.Body = &quot;hello&quot;; .   . SmtpMail.SmtpServer = &quot;localhost&quot;; . SmtpMail.Send(message); . | . What is cross-page posting? . Whenever we click on a submit button on a page, the data is stored on the same page. But if the data is stored on a different page, it is known as a cross-page posting. . Cross-page posting can be achieved by POSTBACKURL property which causes the postback. . FindControl method can be used to get the values that are posted on this page to which the page has been posted. . What are the different types of cookies in ASP.NET? . Session Cookie: It resides on the client machine for a single session until the user logs out. . | Persistent Cookie: Resides on the user machine for a period specified for its expiry. It may be an hour, a month or never. . | . What is the difference between ExecuteScalar and ExecuteNonQuery? . ExecuteScalar ExecuteNonQuery . Returns the output value | Does not return any value | . Used for fetching a single value | Used to execute insert and update statements | . Does not return the number of affected rows | Returns the number of affected rows. | . What is the difference between a stack and a heap? . Stack Heap . Stored value type | Stored reference type | . A stack is responsible for keeping track of each executing thread and its location. | The heap is responsible for keeping track of the more precise objects or data. | .",
            "url": "https://lkgforit.com/2020/12/23/Interview-Notes-Dotnet.html",
            "relUrl": "/2020/12/23/Interview-Notes-Dotnet.html",
            "date": " • Dec 23, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "Interview Notes Dotnet 3",
            "content": "What is a Garbage Collector? . Ans: Garbage collection is a feature of .Net to free the unused code objects in the memory. . The memory heap is divided into three generations. Generation 0, Generation 1 and Generation 2. . Generation 0 – This is used to store short-lived objects. Garbage Collection happens frequently in this Generation. . Generation 1 – This is for medium-lived objects. Usually, the objects that get moved from generation 0 are stored in this. . Generation 2 – This is for long-lived objects. . Collecting a Generation refers to collecting the objects in that generation and all its younger generations. Garbage collection of Generation 2 means full garbage collection, it collects all the objects in Generation 2 as well as Generation 1 and Generation 0. . During the Garbage collection process, as the first phase, list of live objects are identified. In the second phase, references are updated for those objects which will be compacted. And in the last phase, the space occupied by dead objects are reclaimed. The remaining objects are moved to an older segment. . What is BCL? . The Base Class Library is a Common Language Infrastructure. BCL encapsulates a large number of common functionalities which are available to all the .NET Languages. BCL makes the developers life much simpler while implementing various  functionalities like I/O operations, Data access operations, graphical user interfaces and interfaces to various hardware devices by encapsulating them into various namespaces and classes. It also encapsulates the services which are required by the latest real world applications. .NET Framework applications, components and the controls are built on BCL. . Explain Different Types of Constructors in C#? . There are four different types of constructors you can write in a class - . 1. Default Constructor . 2. Parameterized Constructor . 3. Copy Constructor . 4. Static Constructor . What are functional and non-functional requirements? . Functional requirements defines the behavior of a system whereas non-functional requirements specify how the system should behave; in other words they specify the quality requirements and judge the behavior of a system. . E.g. . Functional - Display a chart which shows the maximum number of products sold in a region. . Non-functional – The data presented in the chart must be updated every 5 minutes. . What is a stack? What is a heap? Give the differences between the two? . Stack is a place in the memory where value types are stored. Heap is a place in the memory where the reference types are stored. . What is instrumentation? . It is the ability to monitor an application so that information about the application’s progress, performance and status can be captured and reported. . What is object role modeling (ORM) ? . It is a logical model for designing and querying database models. There are various ORM tools in the market like CaseTalk, Microsoft Visio for Enterprise Architects, Infagon etc. . What is a COM Callable Wrapper (CCW)? . CCW is a wrapper created by the common language runtime(CLR) that enables COM components to access .NET objects. . What is a Runtime Callable Wrapper (RCW)? . RCW is a wrapper created by the common language runtime(CLR) to enable .NET components to call COM components. . What is a digital signature? . A digital signature is an electronic signature used to verify/gurantee the identity of the individual who is sending the message. . What is Application Domain and how does it work? . Windows Operating Systems load a set of resources like .EXE, DLLs and allocate the memory for those resources in an area called as Process. Windows OS creates a separate and isolated area for each running application. Making separate isolation area for each application, makes the process more secure and stable. In case, one process fails, it does not affect the other process. . .NET applications, however, are not hosted like traditional applications by Windows Operating System. Under .NET, .EXEs are hosted under a process by logical partitioning which is known as “Application Domain”. Now you can host multiple application domains under one single process. . What is MIME? . The definition of MIME or Multipurpose Internet Mail Extensions as stated in MSDN is “MIME is a standard that can be used to include content of various types in a single message. MIME extends the Simple Mail Transfer Protocol (SMTP) format of mail messages to include multiple content, both textual and non-textual. Parts of the message may be images, audio, or text in different character sets.  . What are Cookies in ASP.NET? . Answer: Cookies are a State Management Technique that can store the values of control after a post-back. Cookies can store user-specific Information on the client’s machine like when the user last visited your site. Cookies are also known by many names, such as HTTP Cookies, Browser Cookies, Web Cookies, Session Cookies and so on. Basically cookies are a small text file sent by the web server and saved by the Web Browser on the client’s machine. . List of properties containing the HttpCookies Class:  . Domain: Using these properties we can set the domain of the cookie. . | Expires: This property sets the Expiration time of the cookies. . | HasKeys: If the cookies have a subkey then it returns True. . | Name: Contains the name of the Key. . | Path: Contains the Virtual Path to be submitted with the Cookies. . | Secured: If the cookies are to be passed in a secure connection then it only returns True. . | Value: Contains the value of the cookies. . | Limitation of the Cookies . The size of cookies is limited to 4096 bytes. . | A total of 20 cookies can be used in a single website. . | What is Ajax in ASP.NET? . Answer. Ajax stands for Asynchronous JavaScript and XML; in other words Ajax is the combination of various technologies such as a JavaScript, CSS, XHTML, DOM, etc. . AJAX allows web pages to be updated asynchronously by exchanging small amounts of data with the server behind the scenes. This means that it is possible to update parts of a web page, without reloading the entire page. . Web applications running within Microsoft’s Internet Information Services (IIS) utilize what is known as IIS worker processes. These worker processes run as w3wp.exe, and there can be multiple per computer. It is possible to run IIS on a Windows desktop or Windows server, although it is usually only seen on Microsoft Windows Servers configured as web servers. . What is w3wp.exe / IIS Worker Process? . Web applications on Windows Servers are configured via command line or Internet Information Systems (IIS) Manager. Within IIS you can set up websites and which application pools they are assigned. Multiple websites can be assigned to a single IIS application pool. . IIS application pools also provide a bunch of advanced settings. These impact the behavior of w3wp and your IIS worker process. Including things like what Windows user account it runs as, auto restarting of the process, auto shutdown, and more. It is also possible for one IIS application pool to create multiple IIS worker processes in what is called a web garden. . There is one key thing you need to know about IIS application pools that are a little confusing. Within the IIS management console, you can stop and start application pools. But, just because an IIS application pool is started, there may not be an IIS worker process (w3wp) running. IIS will not start the worker process until the first web request is received. .",
            "url": "https://lkgforit.com/2020/12/23/Interview-Notes-Dotnet-3.html",
            "relUrl": "/2020/12/23/Interview-Notes-Dotnet-3.html",
            "date": " • Dec 23, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "Interview Notes Dotnet 2",
            "content": "ASP.NET Core Running under IIS . IIS acts as a front end proxy to the backend Kestrel Console application that hosts the .NET based Kestrel Web server. . . In this scenario, IIS uses a very low level and early pipeline AspNetCoreModule that intercepts all requests pointed at it (via a module mapping) and then forwards those requests to Kestrel on a different port. Requests come in on standard HTTP ports (80 and 443 for SSL) and IIS proxies the incoming requests to a different port that Kestrel is listening on. . By default the module configuration forwards all requests to Kestrel, but you have some very limited control over what gets routed to the module. .  w3wp.exe process (there may be more than one for each application pool so you have find the right one which you can do by looking at the command line arguments in Process Explorer or Task Manager) and the dotnet.exe process . You can see that both w3wp.exe and dotnet.exe - which runs the Kestrel Web server process - are using the same NETWORK SERVICE account. Keep in mind that you may have multiple application pools, and multiple instances of .NET Core Application’s running at the same time in which case each application pool and kestrel process will launch in their associated security context. . . How to enable Attribute Routing? . Just add the method — “MapMvcAttributeRoutes()” to enable attribute routing as shown below . public static void RegisterRoutes(RouteCollection routes) . { . routes.IgnoreRoute(“{resource}.axd/{*pathInfo}”); . //enabling attribute routing . routes.MapMvcAttributeRoutes(); . //convention-based routing . routes.MapRoute . ( . name: “Default”, . url: “{controller}/{action}/{id}”, . defaults: new { controller = “Customer”, action = “GetCustomerList”, id = UrlParameter.Optional } . ); . } . What is routes.IgnoreRoute(“{resource}.axd/{*pathInfo}”) . .axd files don’t exist physically. ASP.NET uses URLs with .axd extensions (ScriptResource.axd and WebResource.axd) internally, and they are handled by an HttpHandler. . Therefore, you should keep this rule, to prevent ASP.NET MVC from trying to handle the request instead of letting the dedicated HttpHandler do it. . 9. Explain JSON Binding? . JavaScript Object Notation (JSON) binding support started from MVC3 onwards via the new JsonValueProviderFactory, which allows the action methods to accept and model-bind data in JSON format. This is useful in Ajax scenarios like client templates and data binding that need to post data back to the server. . Active Directory Federation Services (ADFS): . Active Directory Federation Services (ADFS) is a Single Sign-On (SSO) solution created by Microsoft. As a component of Windows Server operating systems, it provides users with authenticated access to applications that are not capable of using Integrated Windows Authentication (IWA) through Active Directory (AD). . Developed to provide flexibility, ADFS gives organizations the ability to control their employees’ accounts while simplifying the user experience: employees only need to remember a single set of credentials to access multiple applications through SSO. . How does ADFS work? . ADFS manages authentication through a proxy service hosted between AD and the target application. It uses a Federated Trust, linking ADFS and the target application to grant access to users. This enables users to log onto the federated application through SSO without needing to authenticate their identity on application directly. . The authentication process generally follows these four steps: . The user navigates to a URL provided by the ADFS service. . | The ADFS service then authenticates the user via the organization’s AD service. . | Upon authenticating, the ADFS service then provides the user with an authentication claim. . | The user’s browser then forwards this claim to the target application, which either grants or denies access based on the Federated Trust service created. . | Grant limited access to Azure Storage resources using shared access signatures (SAS) . A shared access signature (SAS) provides secure delegated access to resources in your storage account without compromising the security of your data. With a SAS, you have granular control over how a client can access your data.  . Types of shared access signatures . Azure Storage supports three types of shared access signatures: . User delegation SAS (preview). A user delegation SAS is secured with Azure Active Directory (Azure AD) credentials and also by the permissions specified for the SAS. A user delegation SAS applies to Blob storage only. . | . For more information about the user delegation SAS, see Create a user delegation SAS (REST API). . Service SAS. A service SAS is secured with the storage account key. A service SAS delegates access to a resource in only one of the Azure Storage services: Blob storage, Queue storage, Table storage, or Azure Files. . | . For more information about the service SAS, see Create a service SAS (REST API). . Account SAS. An account SAS is secured with the storage account key. An account SAS delegates access to resources in one or more of the storage services. All of the operations available via a service or user delegation SAS are also available via an account SAS. Additionally, with the account SAS, you can delegate access to operations that apply at the level of the service, such as Get/Set Service Properties and Get Service Stats operations. You can also delegate access to read, write, and delete operations on blob containers, tables, queues, and file shares that are not permitted with a service SAS. . | . 3. What is an IL? . Intermediate Language is also known as MSIL (Microsoft Intermediate Language) or CIL (Common Intermediate Language). All .NET source code is compiled to IL. IL is then converted to machine code at the point where the software is installed, or at run-time by a Just-In-Time (JIT) compiler. . 4. What is code access security (CAS)? . Code access security (CAS) is part of the .NET security model that prevents unauthorized access of resources and operations, and restricts the code to perform particular tasks. . 5. What is Difference between NameSpace and Assembly? . Assembly is physical grouping of logical units, Namespace, logically groups classes. . Namespace can span multiple assembly. . 6. Mention the execution process for managed code. . A)Choosing a language compiler . B) Compiling the code to MSIL . C) Compiling MSIL to native code . D) Executing the code. . 7. What is Microsoft Intermediate Language (MSIL)? . The .NET Framework is shipped with compilers of all .NET programming languages to develop programs. There are separate compilers for the Visual Basic, C#, and Visual C++ programming languages in .NET Framework. Each .NET compiler produces an intermediate code after compiling the source code. The intermediate code is common for all languages and is understandable only to .NET environment. This intermediate code is known as MSIL. . 8. What is managed extensibility framework? . Managed extensibility framework (MEF) is a new library that is introduced as a part of .NET 4.0 and Silverlight 4. It helps in extending your application by providing greater reuse of applications and components. MEF provides a way for host application to consume external extensions without any configuration requirement. . 9. Which method do you use to enforce garbage collection in .NET? . The System.GC.Collect() method. . 10. What is the difference between int and int32. . There is no difference between int and int32. System.Int32 is a .NET Class and int is an alias name for System.Int32. . 11. What are tuples? . Tuple is a fixed-size collection that can have elements of either same or different data types. Similar to arrays, a user must have to specify the size of a tuple at the time of declaration. Tuples are allowed to hold up from 1 to 8 elements and if there are more than 8 elements, then the 8th element can be defined as another tuple. Tuples can be specified as parameter or return type of a method. . 12. What is the full form of ADO? . The full form of ADO is ActiveX Data Object. . 13. What are the two fundamental objects in ADO.NET? . DataReader and DataSet are the two fundamental objects in ADO.NET . 14. What is the meaning of object pooling? . Object pooling is a concept of storing a pool (group) of objects in memory that can be reused later as needed. Whenever, a new object is required to create, an object from the pool can be allocated for this request; thereby, minimizing the object creation. A pool can also refer to a group of connections and threads. Pooling, therefore, helps in minimizing the use of system resources, improves system scalability, and performance. . 15. Mention the namespace that is used to include .NET Data Provider for SQL server in .NET code. . The System.Data.SqlClient namespace. . 16. Which architecture does Datasets follow? . Datasets follow the disconnected data architecture. . 17. What is the role of the DataSet object in ADO.NET? . One of the major component of ADO.NET is the DataSet object, which always remains disconnected from the database and reduces the load on the database. . 18. Which property is used to check whether a DataReader is closed or opened? . The IsClosed property is used to check whether a DataReader is closed or opened. This property returns a true value if a Data Reader is closed, otherwise a false value is returned. . 19. Name the method that needs to be invoked on the DataAdapter control to fill the generated DataSet with data? . The Fill() method is used to fill the dataset with data. . 20. What are the pre-requisites for connection pooling? . There must be multiple processes to share the same connection describing the same parameters and security settings. The connection string must be identical. . 21. Which adapter should you use, if you want to get the data from an Access database? . OleDbDataAdapter is used to get the data from an Access database. . 22. What are different types of authentication techniques that are used in connection strings to connect .NET applications with Microsoft SQL Server? . The Windows Authentication option . The SQL Server Authentication option . 23. What are the parameters that control most of connection pooling behaviors? . Connect Timeout . Max Pool Size . Min Pool Size . Pooling . 24. What is AutoPostBack? . If you want a control to postback automatically when an event is raised, you need to set the AutoPostBack property of the control to True. .",
            "url": "https://lkgforit.com/2020/12/23/Interview-Notes-Dotnet-2.html",
            "relUrl": "/2020/12/23/Interview-Notes-Dotnet-2.html",
            "date": " • Dec 23, 2020"
        }
        
    
  
    
        ,"post8": {
            "title": "First Blog",
            "content": "LKG in IT . First Blog . . Profile . Contact . WEBSITE: . Lkgforit.com . | | Sample . First blog title . [Dates From] . trial . SKILLS . [CHART] . | .",
            "url": "https://lkgforit.com/2020/12/23/First-blog.html",
            "relUrl": "/2020/12/23/First-blog.html",
            "date": " • Dec 23, 2020"
        }
        
    
  
    
        ,"post9": {
            "title": "Entityframework Interview Notes",
            "content": "Entity Framework | Entity Framework is an Object Relational Mapper (ORM) which is a type of tool that simplifies mapping between objects in your software to the tables and columns of a relational database. . Types: | POCO - just auto create in visual studio - A POCO entity is a class that doesn’t depend on any framework-specific base class. It is like any other normal .NET CLR class, which is why it is called “Plain Old CLR Objects”. . Dynamic – change some properties attribute based . Entity Lifecycle | States in lifetime – . Added: The entity is marked as added. . | Deleted: The entity is marked as deleted. . | Modified: The entity has been modified. . | Unchanged: The entity hasn’t been modified. . | Detached: The entity isn’t tracked. . State: | | . Unchanged State . | . When an entity is Unchanged, it’s bound to the context but it hasn’t been modified. . | By default, an entity retrieved from the database is in this state. . | When an entity is attached to the context (with the Attach method), it similarly is in the Unchanged state. . | The context can’t track changes to objects that it doesn’t reference, so when they’re attached it assumes they’re Unchanged. . | . Detached State | . Detached is the default state of a newly created entity because the context can’t track the creation of any object in your code. . | This is true even if you instantiate the entity inside a using block of the context. . | Detached is even the state of entities retrieved from the database when tracking is disabled. . | When an entity is detached, it isn’t bound to the context, so its state isn’t tracked. . | It can be disposed of, modified, used in combination with other classes, or used in any other way you might need. . | Because there is no context tracking it, it has no meaning to Entity Framework. . | . Added State | . When an entity is in the Added state, you have few options. In fact, you can only detach it from the context. . | Naturally, even if you modify some property, the state remains Added, because moving it to Modified, Unchanged, or Deleted makes no sense. . | It’s a new entity and has no correspondence with a row in the database. . | This is a fundamental prerequisite for being in one of those states (but this rule isn’t enforced by the context). . | . Modified State | . When an entity is modified, that means it was in Unchanged state and then some property was changed. . | After an entity enters the Modified state, it can move to the Detached or Deleted state, but it can’t roll back to the Unchanged state even if you manually restore the original values. . | It can’t even be changed to Added, unless you detach and add the entity to the context, because a row with this ID already exists in the database, and you would get a runtime exception when persisting it. . | . Deleted State | . An entity enters the Deleted state because it was Unchanged or Modified and then the DeleteObject method was used. . | This is the most restrictive state, because it’s pointless changing from this state to any other value but Detached. . Entity Framework Approach types: | | . Code First . | Database First . | Model First . | .",
            "url": "https://lkgforit.com/2020/12/23/EntityFramework-Interview-Notes.html",
            "relUrl": "/2020/12/23/EntityFramework-Interview-Notes.html",
            "date": " • Dec 23, 2020"
        }
        
    
  
    
        ,"post10": {
            "title": "Design Patterns Interview Notes",
            "content": "Design Patterns: | Definition: - design patterns are time tested solution for architecture problems, time tested practices of OOP . Understandable – it helps people learn object-oriented thinking in much better manner. . GOF Design Patterns . The 23 Design patterns are defined by the Gang of Four programmers. These 23 patterns are divided into three groups depending on the nature of the design problem they intend to solve. . Creational Design Patterns . These patterns deal with the process of objects creation in such a way that they can be decoupled from their implementing system. This provides more flexibility in deciding which objects need to be created for a given use case/ scenario. There are as follows: . Factory Method : Create instances of derived classes . | Abstract Factory : Create instances of several classes belonging to different families . | Builder : Separates an object construction from its representation . | Prototype : Create a duplicate object or clone of the object . | Singleton : Ensures that a class can have only one instance . | Structural Design Patterns . These patterns deal with the composition of objects structures. The concept of inheritance is used to compose interfaces and define various ways to compose objects for obtaining new functionalities. There are as follows: . Adapter : Match interfaces of different classes . | Bridge : Separates an object’s abstraction from its implementation . | Composite : A tree structure of simple and composite objects . | Decorator : Add responsibilities to objects dynamically . | Façade : A single class that represents an entire complex system . | Flyweight : Minimize memory usage by sharing as much data as possible with similar objects . | Proxy : Provides a surrogate object, which references to other object . | Behavioral Design Patterns . These patterns deal with the process of communication, managing relationships, and responsibilities between objects. There are as follows: . Chain of Responsibility: Passes a request among a list or chain of objects. . | Command: Wraps a request under an object as a command and passed to invoker object. . | Interpreter: Implements an expression interface to interpret a particular context. . | Iterator: Provides a way to access the elements of a collection object in sequential manner without knowing its underlying structure. . | Mediator: Allows multiple objects to communicate with each other’s without knowing each other’s structure. . | Memento: Capture the current state of an object and store it in such a manner that it can be restored at a later time without breaking the rules of encapsulation. . | Observer: Allows an object (subject) to publish changes to its state and other objects (observer) that depend upon that object are automatically notified of any changes to the subject’s state. . | State: Alters the behavior of an object when it’s internal state changes. . | Strategy: Allows a client to choose an algorithm from a family of algorithms at run-time and gives it a simple way to access it. . | Visitor: Creates and performs new operations onto a set of objects without changing the object structure or classes. . | Template Method: Defines the basic steps of an algorithm and allow the implementation of the individual steps to be changed. . | OOP Phase Design pattern category Example . Template/class creation problem | Structural design pattern | Structural design patterns are Adapter, Bridge, Composite, Decorator, Facade, Flyweight, Private Class Data, and Proxy. | . Instantiation problems | Creational design pattern | Creational design patterns are the Factory Method, Abstract Factory, Builder, Singleton, Object Pool, and Prototype. | . Runtime problems | Behavioral design pattern | Behavioral patterns are Chain of responsibility, Command, Interpreter, Iterator, Mediator, Memento, Null Object, Observer, State, Strategy, Template method, Visitor | . Class new instance – use it . Polymorphism – fundamental thing to achieve decoupling. . Simple Factory pattern – it helps centralize object creation and thus decoupling achieved – don’t use direct obj creation in app . RIP – Replace IF with polymorphism - enum of customer type based on input type input in string return obj of customer . Lazy loading pattern – load objects on demand . Differences: | Design pattern – code or pseudo code - eg.: Factory, iterator, singleton . | Architecture pattern – block diagrams – view of diagram – eg.: MVC, MVP, MVVM . | Architecture style – principles – eg.: REST(representational state transfer – http protocol crud operations), SOA(service oriented architctr) . Differences: | | Design pattern – code or pseudo code . Unity: | | . Inversion of Control (IoC) is a design principle (although, some people refer to it as a pattern). As the name suggests, it is used to invert different kinds of controls in object-oriented design to achieve loose coupling. Here, controls refer to any additional responsibilities a class has, other than its main responsibility. This include control over the flow of an application, and control over the flow of an object creation or dependent object creation and binding. . Dependency Injection (DI) is a design pattern used to implement IoC. | Constructor Injection: In the constructor injection, the injector supplies the service (dependency) through the client class constructor. . public CustomerBusinessLogic(ICustomerDataAccess custDataAccess) . { . _dataAccess = custDataAccess; . } . Property Injection: In the property injection (aka the Setter Injection), the injector supplies the dependency through a public property of the client class. | public ICustomerDataAccess DataAccess { get; set; } . Method Injection: In this type of injection, the client class implements an interface which declares the method(s) to supply the dependency and the injector uses this interface to supply the dependency to the client class. | public void SetDependency(ICustomerDataAccess customerDataAccess) . { . _dataAccess = customerDataAccess; . } . Factory Method Design Pattern . The factory design pattern in C# is used to replace class constructors, abstracting the process of object generation so that the type of the object instantiated can be determined at run-time. In this article, you will learn how to implement Factory Method Design Pattern In C# and .NET. . UML Class Diagram . The classes and objects participating in the above UML class diagram are as follows: .   . Product This defines the interface of objects the factory method creates | ConcreteProduct This is a class which implements the Product interface. | Creator This is an abstract class and declares the factory method, which returns an object of type Product. | This may also define a default implementation of the factory method that returns a default ConcreteProduct object. . This may call the factory method to create a Product object. . ConcreteCreator This is a class which implements the Creator class and overrides the factory method to return an instance of a ConcreteProduct. |  Who is what? . The classes and objects participating in the above class diagram can be identified as follows: . Product - CreditCard . | ConcreteProduct- MoneyBackCreditCard, TitaniumCreditCard, PlatinumCreditCard . | Creator- CardFactory . | ConcreteCreator- MoneyBackCardFactory, TitaniumCardFactory, PlatinumCardFactory . | using System;   . |    . | namespace FactoryMethodDesignPatternInCSharp   . | {   . |     /// &lt;summary&gt;   . |     /// Factory Pattern Demo   . |     /// &lt;/summary&gt;     . |     public class ClientApplication   . |     {   . |         static void Main()   . |         {   . |             CardFactory factory = null;   . |             Console.Write(“Enter the card type you would like to visit: ”);   . |             string car = Console.ReadLine();   . |    . |             switch (car.ToLower())   . |             {   . |                 case ”moneyback”:   . |                     factory = new MoneyBackFactory(50000, 0);   . |                     break;   . |                 case ”titanium”:   . |                     factory = new TitaniumFactory(100000, 500);   . |                     break;   . |                 case ”platinum”:   . |                     factory = new PlatinumFactory(500000, 1000);   . |                     break;   . |                 default:   . |                     break;   . |             }   . |    . |             CreditCard creditCard = factory.GetCreditCard();   . |             Console.WriteLine(“ nYour card details are below :  n”);   . |             Console.WriteLine(“Card Type: {0} nCredit Limit: {1} nAnnual Charge: {2}”,   . |                 creditCard.CardType, creditCard.CreditLimit, creditCard.AnnualCharge);   . |             Console.ReadKey();   . |         }   . |     }   . | public class AirConditioner . { . private readonly Dictionary&lt;Actions, AirConditionerFactory&gt; _factories; . public AirConditioner() . { . _factories = new Dictionary&lt;Actions, AirConditionerFactory&gt;(); . foreach (Actions action in Enum.GetValues(typeof(Actions))) . { . var factory = (AirConditionerFactory)Activator.CreateInstance(Type.GetType(“FactoryMethod.” + Enum.GetName(typeof(Actions), action) + “Factory”)); . _factories.Add(action, factory); . } . } . } . Abstract Factory Design Pattern . Under Creational Pattern | . Abstract Factory use Factory design pattern for creating objects. It may also use Builder design pattern and prototype design pattern for creating objects. It completely depends upon your implementation for creating objects.  . Abstract Factory patterns act a super-factory which creates other factories. This pattern is also called a Factory of factories. In Abstract Factory pattern an interface is responsible for creating a set of related objects, or dependent objects without specifying their concrete classes. . . The classes, interfaces, and objects in the above UML class diagram are as follows: . AbstractFactory . This is an interface which is used to create abstract product . ConcreteFactory . This is a class which implements the AbstractFactory interface to create concrete products. . AbstractProduct . This is an interface which declares a type of product. . ConcreteProduct . This is a class which implements the AbstractProduct interface to create a product. . Client . This is a class which uses AbstractFactory and AbstractProduct interfaces to create a family of related objects. . public interface AbstractFactory . { . AbstractProductA CreateProductA(); . AbstractProductB CreateProductB(); . } . public class ConcreteFactoryA : AbstractFactory . { . public AbstractProductA CreateProductA() . { . return new ProductA1(); . } . public AbstractProductB CreateProductB() . { . return new ProductB1(); . } . } . public class ConcreteFactoryB : AbstractFactory . { . public AbstractProductA CreateProductA() . { . return new ProductA2(); . } . public AbstractProductB CreateProductB() . { . return new ProductB2(); . } . } . public interface AbstractProductA { } . public class ProductA1 : AbstractProductA { } . public class ProductA2 : AbstractProductA { } . public interface AbstractProductB { } . public class ProductB1 : AbstractProductB { } . public class ProductB2 : AbstractProductB { } . public class Client . { . private AbstractProductA _productA; . private AbstractProductB _productB; . public Client(AbstractFactory factory) . { . _productA = factory.CreateProductA(); . _productB = factory.CreateProductB(); . } . } . The classes, interfaces, and objects in the above class diagram can be identified as follows: . VehicleFactory - AbstractFactory interface . | HondaFactory &amp; HeroFactory- Concrete Factories . | Bike &amp; Scooter - AbstractProduct interface . | Regular Bike, Sports Bike, Regular Scooter &amp; Scooty - Concrete Products . | VehicleClient - Client . | /// &lt;summary&gt; . /// Abstract Factory Pattern Demo . /// &lt;/summary&gt; . class Program . { . static void Main(string[] args) . { . VehicleFactory honda = new HondaFactory(); . VehicleClient hondaclient = new VehicleClient(honda, “Regular”); . Console.WriteLine(“******* Honda **********”); . Console.WriteLine(hondaclient.GetBikeName()); . Console.WriteLine(hondaclient.GetScooterName()); . hondaclient = new VehicleClient(honda, “Sports”); . Console.WriteLine(hondaclient.GetBikeName()); . Console.WriteLine(hondaclient.GetScooterName()); . VehicleFactory hero = new HeroFactory(); . VehicleClient heroclient = new VehicleClient(hero, “Regular”); . Console.WriteLine(“******* Hero **********”); . Console.WriteLine(heroclient.GetBikeName()); . Console.WriteLine(heroclient.GetScooterName()); . heroclient = new VehicleClient(hero, “Sports”); . Console.WriteLine(heroclient.GetBikeName()); . Console.WriteLine(heroclient.GetScooterName()); . Console.ReadKey(); . } . } . # . Builder Design Pattern . Builder pattern builds a complex object by using a step by step approach. Builder interface defines the steps to build the final object. This builder is independent of the objects creation process. A class that is known as Director, controls the object creation process. . Moreover, builder pattern describes a way to separate an object from its construction. The same construction method can create a different representation of the object. . . The classes, interfaces, and objects in the above UML class diagram are as follows: . Builder . This is an interface which is used to define all the steps to create a product . ConcreteBuilder . This is a class which implements the Builder interface to create a complex product. . Product . This is a class which defines the parts of the complex object which are to be generated by the builder pattern. . Director . This is a class which is used to construct an object using the Builder interface. . /// &lt;summary&gt; . /// The ‘Builder’ interface . /// &lt;/summary&gt; . public interface IVehicleBuilder . { . void SetModel(); . void SetEngine(); . void SetTransmission(); . void SetBody(); . void SetAccessories(); . Vehicle GetVehicle(); . } . /// &lt;summary&gt; . /// The ‘ConcreteBuilder1’ class . /// &lt;/summary&gt; . public class HeroBuilder : IVehicleBuilder . { . Vehicle objVehicle = new Vehicle(); . public void SetModel() . { . objVehicle.Model = “Hero”; . } . public void SetEngine() . { . objVehicle.Engine = “4 Stroke”; . } . public void SetTransmission() . { . objVehicle.Transmission = “120 km/hr”; . } . public void SetBody() . { . objVehicle.Body = “Plastic”; . } . public void SetAccessories() . { . objVehicle.Accessories.Add(“Seat Cover”); . objVehicle.Accessories.Add(“Rear Mirror”); . } . public Vehicle GetVehicle() . { . return objVehicle; . } . } . /// &lt;summary&gt; . /// The ‘ConcreteBuilder2’ class . /// &lt;/summary&gt; . public class HondaBuilder : IVehicleBuilder . { . Vehicle objVehicle = new Vehicle(); . public void SetModel() . { . objVehicle.Model = “Honda”; . } . public void SetEngine() . { . objVehicle.Engine = “4 Stroke”; . } . public void SetTransmission() . { . objVehicle.Transmission = “125 Km/hr”; . } . public void SetBody() . { . objVehicle.Body = “Plastic”; . } . public void SetAccessories() . { . objVehicle.Accessories.Add(“Seat Cover”); . objVehicle.Accessories.Add(“Rear Mirror”); . objVehicle.Accessories.Add(“Helmet”); . } . public Vehicle GetVehicle() . { . return objVehicle; . } . } . /// &lt;summary&gt; . /// The ‘Product’ class . /// &lt;/summary&gt; . public class Vehicle . { . public string Model { get; set; } . public string Engine { get; set; } . public string Transmission { get; set; } . public string Body { get; set; } . public List&lt;string&gt; Accessories { get; set; } . public Vehicle() . { . Accessories = new List&lt;string&gt;(); . } . public void ShowInfo() . { . Console.WriteLine(“Model: {0}”, Model); . Console.WriteLine(“Engine: {0}”, Engine); . Console.WriteLine(“Body: {0}”, Body); . Console.WriteLine(“Transmission: {0}”, Transmission); . Console.WriteLine(“Accessories:”); . foreach (var accessory in Accessories) . { . Console.WriteLine(“ t{0}”, accessory); . } . } . } . /// &lt;summary&gt; . /// The ‘Director’ class . /// &lt;/summary&gt; . public class VehicleCreator . { . private readonly IVehicleBuilder objBuilder; . public VehicleCreator(IVehicleBuilder builder) . { . objBuilder = builder; . } . public void CreateVehicle() . { . objBuilder.SetModel(); . objBuilder.SetEngine(); . objBuilder.SetBody(); . objBuilder.SetTransmission(); . objBuilder.SetAccessories(); . } . public Vehicle GetVehicle() . { . return objBuilder.GetVehicle(); . } . } . /// &lt;summary&gt; . /// Builder Design Pattern Demo . /// &lt;/summary&gt; . class Program . { . static void Main(string[] args) . { . var vehicleCreator = new VehicleCreator(new HeroBuilder()); . vehicleCreator.CreateVehicle(); . var vehicle = vehicleCreator.GetVehicle(); . vehicle.ShowInfo(); . Console.WriteLine(“———————————————”); . vehicleCreator = new VehicleCreator(new HondaBuilder()); . vehicleCreator.CreateVehicle(); . vehicle = vehicleCreator.GetVehicle(); . vehicle.ShowInfo(); . Console.ReadKey(); . } . } . Repository Pattern . the repository pattern can be implemented, to separate the layers. Our purpose will be to separate the controller and the data access layer (database context) using an intermediate layer, in other words repository layer, for communication between the two. . . A generic repository is a generic class, with basic CRUD methods in it (and of course other methods can be added as needed). This class and its member functions can be used for any entity of the database. This means, if we have entities Customers and Orders, this single generic class can be used for both of them. . . . : . : . And, our controller method to fetch the records will look like the following: . : . . Facade Design Pattern . Facade Pattern is used in hiding complexity of large systems and provide simpler interfaces, . A room is a façade and just by looking at it from outside the door, one can not predict what is inside the room and how the room is structured from inside. Thus, Façade is a general term for simplifying the outward appearance of a complex or large system.Facade is a structural design pattern that provides a simplified interface to a library, a framework, or any other complex set of classes. . UML diagram, . . Customers place their orders just by talking to the operator and they don’t need to bother about how they will prepare the pizza, what all operations will they perform, on what temperature they will cook, etc.  . Similarly, in our code sample, we can see that the client is using the restaurant façade class to order pizza and bread of different types without directly interacting with the subclasses. . This is the interface specific to the pizza. . public interface IPizza {   . |     void GetVegPizza();   . |     void GetNonVegPizza();   . | }   . | This is a pizza provider class which will get pizza for their clients. Here methods can have other private methods which client is not bothered about. . public class PizzaProvider: IPizza {   . |     public void GetNonVegPizza() {   . |         GetNonVegToppings();   . |         Console.WriteLine(“Getting Non Veg Pizza.”);   . |     }   . |     public void GetVegPizza() {   . |         Console.WriteLine(“Getting Veg Pizza.”);   . |     }   . |     private void GetNonVegToppings() {   . |         Console.WriteLine(“Getting Non Veg Pizza Toppings.”);   . |     }   . | }   . | Similarly, this is the interface specific for the bread. . public interface IBread {   . |     void GetGarlicBread();   . |     void GetCheesyGarlicBread();   . | }   . | And this is a bread provider class. . public class BreadProvider: IBread {   . |     public void GetGarlicBread() {   . |         Console.WriteLine(“Getting Garlic Bread.”);   . |     }   . |     public void GetCheesyGarlicBread() {   . |         GetCheese();   . |         Console.WriteLine(“Getting Cheesy Garlic Bread.”);   . |     }   . |     private void GetCheese() {   . |         Console.WriteLine(“Getting Cheese.”);   . |     }   . | }   . | Below is the restaurant façade class, which will be used by the client to order different pizzas or breads. . public class RestaurantFacade {   . |     private IPizza _PizzaProvider;   . |     private IBread _BreadProvider;   . |     public RestaurantFacade() {   . |         _PizzaProvider = new PizzaProvider();   . |         _BreadProvider = new BreadProvider();   . |     }   . |     public void GetNonVegPizza() {   . |         _PizzaProvider.GetNonVegPizza();   . |     }   . |     public void GetVegPizza() {   . |         _PizzaProvider.GetVegPizza();   . |     }   . |     public void GetGarlicBread() {   . |         _BreadProvider.GetGarlicBread();   . |     }   . |     public void GetCheesyGarlicBread() {   . |         _BreadProvider.GetCheesyGarlicBread();   . |     }   . | }   . | Finally, below is the main method of our program, . void Main() {   . |     Console.WriteLine(“———————-CLIENT ORDERS FOR PIZZA—————————- n”);   . |     var facadeForClient = new RestaurantFacade();   . |     facadeForClient.GetNonVegPizza();   . |     facadeForClient.GetVegPizza();   . |     Console.WriteLine(“ n———————-CLIENT ORDERS FOR BREAD—————————- n”);   . |     facadeForClient.GetGarlicBread();   . |     facadeForClient.GetCheesyGarlicBread();   . | }   . | WHEN TO USE THIS PATTERN . Use this pattern to simplify the problem when there are multiple complex subsystems and interacting with them individually is really difficult/cumbersome. . REAL LIFE USE CASE – example - Redbus app . The shopkeeper is a façade for all the items in the shop. . | Online travel portal is a façade for their customers for different holiday/travel packages. . | Customer care is a façade for their customers for different services.  . | . Singleton Design Pattern . Ensures a class has only one instance and provides a global point of access to it. . | A singleton is a class that only allows a single instance of itself to be created, and usually gives simple access to that instance. . | Most commonly, singletons don’t allow any parameters to be specified when creating the instance, since a second request of an instance with a different parameter could be problematic! (If the same instance should be accessed for all requests with the same parameter then the factory pattern is more appropriate.) . | characteristics of a Singleton Pattern. . A single constructor, that is private and parameterless. . | The class is sealed. . | A static variable that holds a reference to the single created instance, if any. . | A public static means of getting the reference to the single created instance, creating one if necessary. . | . Advantages of Singleton Pattern .   . The advantages of a Singleton Pattern are: . Singleton pattern can be implemented interfaces. . | It can be also inherit from other classes. . | It can be lazy loaded. . | It has Static Initialization. . | It can be extended into a factory pattern. . | It helps to hide dependencies. . | It provides a single point of access to a particular instance, so it is easy to maintain. . | Singleton class vs. Static methods .   . The following conpares Singleton class vs. Static methods: . A Static Class cannot be extended whereas a singleton class can be extended. . | A Static Class can still have instances (unwanted instances) whereas a singleton class prevents it. . | A Static Class cannot be initialized with a STATE (parameter), whereas a singleton class can be. . | A Static class is loaded automatically by the CLR when the program or namespace containing the class is loaded. . | How to Implement Singleton Pattern in your code .   . There are many way to implement a Singleton Pattern in C#. . No Thread Safe Singleton. . | Thread-Safety Singleton. . | Thread-Safety Singleton using Double-Check Locking. . | Thread-Safe Singleton without using locks and no lazy instantiation. . | Fully lazy instantiation. . | Using .NET 4’s Lazy&lt;T&gt; type. . | 1. No Thread Safe Singleton .   . Explanation of the following code: . The following code is not thread-safe. . | Two different threads could both have evaluated the test (if instance == null) and found it to be true, then both creates instances, which violates the singleton pattern. . | Note that in fact the instance may already have been created before the expression is evaluated, but the memory model doesn’t guarantee that the new value of instance will be seen by other threads unless suitable memory barriers have been passed. . | // Bad code! Do not use!   . | public sealed class Singleton   . | {   . |     //Private Constructor.   . |     private Singleton()   . |     {   . |     }   . |     private static Singleton instance = null;   . |     public static Singleton Instance   . |     {   . |         get   . |         {   . |             if (instance == null)   . |             {   . |                 instance = new Singleton();   . |             }   . |             return instance;   . |         }   . |     }   . | }   . | 2. Thread Safety Singleton .   . Explanation of the following code: . This implementation is thread-safe. . | In the following code, the thread is locked on a shared object and checks whether an instance has been created or not. . | This takes care of the memory barrier issue and ensures that only one thread will create an instance. . | For example: Since only one thread can be in that part of the code at a time, by the time the second thread enters it, the first thread will have created the instance, so the expression will evaluate to false. . | The biggest problem with this is performance; performance suffers since a lock is required every time an instance is requested. . | public sealed class Singleton   . | {   . |     Singleton()   . |     {   . |     }   . |     private static readonly object padlock = new object();   . |     private static Singleton instance = null;   . |     public static Singleton Instance   . |     {   . |         get   . |         {   . |             lock (padlock)   . |             {   . |                 if (instance == null)   . |                 {   . |                     instance = new Singleton();   . |                 }   . |                 return instance;   . |             }   . |         }   . |     }   . | }   . | 3. Thread Safety Singleton using Double Check Locking .   . Explanation of the following code: . In the following code, the thread is locked on a shared object and checks whether an instance has been created or not with double checking. | public sealed class Singleton   . | {   . |     Singleton()   . |     {   . |     }   . |     private static readonly object padlock = new object();   . |     private static Singleton instance = null;   . |     public static Singleton Instance   . |     {   . |         get   . |         {   . |             if (instance == null)   . |             {   . |                 lock (padlock)   . |                 {   . |                     if (instance == null)   . |                     {   . |                         instance = new Singleton();   . |                     }   . |                 }   . |             }   . |             return instance;   . |         }   . |     }   . | } . | 4. Thread Safe Singleton without using locks and no lazy instantiation .   . Explanation of the following code: . The preceding implementation looks like very simple code. . | This type of implementation has a static constructor, so it executes only once per Application Domain. . | It is not as lazy as the other implementation. . | public sealed class Singleton   . | {   . |     private static readonly Singleton instance = new Singleton();   . |     // Explicit static constructor to tell C# compiler   . |     // not to mark type as beforefieldinit   . |     static Singleton()   . |     {   . |     }   . |     private Singleton()   . |     {   . |     }   . |     public static Singleton Instance   . |     {   . |         get   . |         {   . |             return instance;   . |         }   . |     }   . | }   . | 5. Fully lazy instantiation .   . Explanation of the following code: . Here, instantiation is triggered by the first reference to the static member of the nested class, that only occurs in Instance. . | This means the implementation is fully lazy, but has all the performance benefits of the previous ones. . | Note that although nested classes have access to the enclosing class’s private members, the reverse is not true, hence the need for instance to be internal here. . | That doesn’t raise any other problems, though, as the class itself is private. . | The code is more complicated in order to make the instantiation lazy. . | public sealed class Singleton   . | {   . |     private static readonly Singleton instance = new Singleton();   . |     // Explicit static constructor to tell C# compiler   . |     // not to mark type as beforefieldinit   . |     static Singleton()   . |     {   . |     }   . |     private Singleton()   . |     {   . |     }   . |     public static Singleton Instance   . |     {   . |         get   . |         {   . |             return instance;   . |         }   . |     }   . | }   . | 6. Using .NET 4’s Lazy&lt;T&gt; type .   . Explanation of the following code: . If you’re using .NET 4 (or higher) then you can use the System.Lazy&lt;T&gt; type to make the laziness really simple. . | All you need to do is pass a delegate to the constructor that calls the Singleton constructor, which is done most easily with a lambda expression. . | It also allows you to check whether or not the instance has been created with the IsValueCreated property. . | public sealed class Singleton   . | {   . |     private Singleton()   . |     {   . |     }   . |     private static readonly Lazy&lt;Singleton&gt; lazy = new Lazy&lt;Singleton&gt;(() =&gt; new Singleton());   . |     public static Singleton Instance   . |     {   . |         get   . |         {   . |             return lazy.Value;   . |         }   . |     }   . | } .",
            "url": "https://lkgforit.com/2020/12/23/Design-Patterns-Interview-Notes.html",
            "relUrl": "/2020/12/23/Design-Patterns-Interview-Notes.html",
            "date": " • Dec 23, 2020"
        }
        
    
  
    
        ,"post11": {
            "title": "Dependency Inversion Interview Notes",
            "content": "Dependency Inversion Principle (DIP) . This principle is about dependencies among components. The definition of DIP is given by Robert C. Martin is as follows: . High-level modules should not depend on low-level modules. Both should depend on abstractions. . | Abstractions should not depend on details. Details should depend on abstractions. . | Understanding . The principle says that high-level modules should depend on abstraction, not on the details, of low-level modules. In simple words, the principle says that there should not be a tight coupling among components of software and to avoid that, the components should depend on abstraction. . The terms Dependency Injection (DI) and Inversion of Control (IoC) are generally used as interchangeably to express the same design pattern. The pattern was initially called IoC, but Martin Fowler (known for designing the enterprise software) anticipated the name as DI because all frameworks or runtime invert the control in some way and he wanted to know which aspect of control was being inverted. . Inversion of Control (IoC) is a technique to implement the Dependency Inversion Principle in C#. Inversion of control can be implemented using either an abstract class or interface. The rule is that the lower level entities should join the contract to a single interface and the higher-level entities will use only entities that are implementing the interface. This technique removes the dependency between the entities. . Note: . In below implementation, I have used interface as a reference, but you can use abstract class or interface as per your requirement. . Implementation . In below code, we have implemented DIP using IoC using injection constructor. There are different ways to implement Dependency injection. Here, I have use injection thru constructor but you inject the dependency into class’s constructor (Constructor Injection), set property (Setter Injection), method (Method Injection), events, index properties, fields and basically any members of the class which are public. . public interface IAutomobile . { . void Ignition(); . void Stop(); . } . public class Jeep : IAutomobile . { . #region IAutomobile Members . public void Ignition() . { . Console.WriteLine(“Jeep start”); . } . public void Stop() . { . Console.WriteLine(“Jeep stopped.”); . } . #endregion . } . public class SUV : IAutomobile . { . #region IAutomobile Members . public void Ignition() . { . Console.WriteLine(“SUV start”); . } . public void Stop() . { . Console.WriteLine(“SUV stopped.”); . } . #endregion . } . public class AutomobileController . { . IAutomobile m_Automobile; . public AutomobileController(IAutomobile automobile) . { . this.m_Automobile = automobile; . } . public void Ignition() . { . m_Automobile.Ignition(); . } . public void Stop() . { . m_Automobile.Stop(); . } . } . class Program . { . static void Main(string[] args) . { . IAutomobile automobile = new Jeep(); . //IAutomobile automobile = new SUV(); . AutomobileController automobileController = new AutomobileController(automobile); . automobile.Ignition(); . automobile.Stop(); . Console.Read(); . } . } .",
            "url": "https://lkgforit.com/2020/12/23/Dependency-Inversion-Interview-Notes.html",
            "relUrl": "/2020/12/23/Dependency-Inversion-Interview-Notes.html",
            "date": " • Dec 23, 2020"
        }
        
    
  
    
        ,"post12": {
            "title": "C# Interview Notes",
            "content": "C#: . Generics – some keyword to mention – compile time assign type. . | Collections: . | | . Struct . | Class - blue print of object . | Datatypes – . | . Value types – in Heap | Value Type: . A Value Type stores its contents in memory allocated on the stack. When you created a Value Type, a single space in memory is allocated to store the value and that variable directly holds a value. If you assign it to another variable, the value is copied directly and both variables work independently. Predefined datatypes, structures, enums are also value types, and work in the same way. Value types can be created at compile time and Stored in stack memory, because of this, Garbage collector can’t access the stack. . Reference types – in Stack | Reference Type: . Reference Types are used by a reference which holds a reference (address) to the object but not the object itself. Because reference types represent the address of the variable rather than the data itself, assigning a reference variable to another doesn’t copy the data. Instead it creates a second copy of the reference, which refers to the same location of the heap as the original value. Reference Type variables are stored in a different area of memory called the heap. This means that when a reference type variable is no longer used, it can be marked for garbage collection. Examples of reference types are Classes, Objects, Arrays, Indexers, Interfaces etc. . Var – anonymous type - implicitly typed variable – type based on right side of = . | Dynamic type - A dynamic type escapes type checking at compile time; instead, it resolves type at run time. . | Enum – named integer constants . | LINQ - language integrated query - single querying interface for different types of data sources. . | var teenStudentsName = from s in studentList . where s.age &gt; 12 &amp;&amp; s.age &lt; 20 . select new { StudentName = s.StudentName }; . Lambda – lambda expression along with linq – shorter way to represent anonymous method – special syntax | var studentNames = studentList.Where(s =&gt; s.Age &gt; 18) . .Select(s =&gt; s) . .Where(st =&gt; st.StandardID &gt; 0) . .Select(s =&gt; s.StudentName); . Extension method - additional methods. Extension methods allow you to inject additional methods without modifying, deriving or recompiling the original class, struct or interface |  public static class XX   . |     {   . |          public static void NewMethod(this Class1 ob)   . |         {   . |             Console.WriteLine(“Hello I m extended method”);   . |         }   . |     }   . Async - Async and await are the code markers, which marks code positions from where the control should resume after a task completes. . | pass by ref - memory based – same value . | pass by value – value will be different diff ram location address . | Optional parameters - . | | Comparison Chart . BASIS FOR COMPARISON BOXING UNBOXING . Basic | Object type refers to the value type. | process of retrieving value from the boxed object. | . Storage | The value stored on the stack is copied to the object stored on heap memory. | The object&#39;s value stored on the heap memory is copied to the value type stored on stack. | . Conversion | Implicit conversion. | Explicit conversion. | . Example | int n = 24; object ob = n; | int m = (int) ob; | . Oops: . polymorphism | | overloading - same method name attributes different – parameters . Overriding – same method name and attributes – inheritance – parent class method with virtual keyword – child class override keyword. . Encapsulation . | Interface – only method defn no content – used for multiple inheritance – not available in c# . | Abstract – method defn or full method – inheriting can override or implement . | – eg&gt;: cellphone old model features used in new ones. . Sealed Class – cannot inherit class – extension method is possible |",
            "url": "https://lkgforit.com/2020/12/23/C-Interview-Notes.html",
            "relUrl": "/2020/12/23/C-Interview-Notes.html",
            "date": " • Dec 23, 2020"
        }
        
    
  
    
        ,"post13": {
            "title": "Azure Basics Interview Notes",
            "content": "Azure . Azure Types: | | Types of Azure Clouds . There are mainly three types of clouds in Microsoft Azure are: . PAAS – (Platform as a service) is a computing platform which includes an operating system, programming language execution environment, database or web services. This Azure service is used by developers and application providers. . | SAAS – (Software as a service) is software which is centrally hosted and managed. It is a single version of the application is used for all customers. You can scale out to multiple instances. This helps you to ensure the best performance in all locations. The software is licensed through a monthly or annual subscription. MS Exchange, Office, Dynamics are offered as a SaaS . | IASS - (Infrastructure as a Service) is the foundational cloud platform layer. This Azure service is used by IT administrators for processing, storage, networks or any other fundamental computer operations. . Azure Functions: | | . Azure Functions makes the app development process more productive, and lets you launch serverless applications on Microsoft Azure. It helps in processing data, coordinating with different systems for IoT, integrating various processes and systems and building simple APIs and microservices. . Features | Here are some key features of Functions: . Choice of language - Write functions using your choice of C#, Java, Javascript, Python, and other languages. See Supported languages for the complete list. . | Pay-per-use pricing model - Pay only for the time spent running your code. See the Consumption hosting plan option in the pricing section. . | Bring your own dependencies - Functions supports NuGet and NPM, so you can use your favorite libraries. . | Integrated security - Protect HTTP-triggered functions with OAuth providers such as Azure Active Directory, Facebook, Google, Twitter, and Microsoft Account. . | Simplified integration - Easily leverage Azure services and software-as-a-service (SaaS) offerings. . | Flexible development - Code your functions right in the portal or set up continuous integration and deploy your code through GitHub, Azure DevOps Services, and other supported development tools. . | Open-source - The Functions runtime is open-source and available on GitHub. . Types: | | . HTTPTrigger - Trigger the execution of your code by using an HTTP request. For an example, see Create your first function. . | TimerTrigger - Execute cleanup or other batch tasks on a predefined schedule. For an example, see Create a function triggered by a timer. . | CosmosDBTrigger - Process Azure Cosmos DB documents when they are added or updated in collections in a NoSQL database. For more information, see Azure Cosmos DB bindings. . | BlobTrigger - Process Azure Storage blobs when they are added to containers. You might use this function for image resizing. For more information, see Blob storage bindings. . | QueueTrigger - Respond to messages as they arrive in an Azure Storage queue. For more information, see Azure Queue storage bindings. . | EventGridTrigger - Respond to events delivered to a subscription in Azure Event Grid. Supports a subscription-based model for receiving events, which includes filtering. A good solution for building event-based architectures. For an example, see Automate resizing uploaded images using Event Grid. . | EventHubTrigger - Respond to events delivered to an Azure Event Hub. Particularly useful in application instrumentation, user experience or workflow processing, and internet-of-things (IoT) scenarios. For more information, see Event Hubs bindings. . | ServiceBusQueueTrigger - Connect your code to other Azure services or on-premises services by listening to message queues. For more information, see Service Bus bindings. . | ServiceBusTopicTrigger - Connect your code to other Azure services or on-premises services by subscribing to topics. For more information, see Service Bus bindings. . App Service: | | . Azure App Service is a fully managed “Platform as a Service” (PaaS) that integrates Microsoft Azure Websites, Mobile Services, and BizTalk Services into a single service, adding new capabilities that enable integration with on-premises or cloud systems. . . Microsoft Service Fabric: | Microsoft Azure Service Fabric is the next-generation cloud application platform for highly scalable, highly reliable distributed applications. It introduces many new features for packaging, deploying, upgrading, and managing distributed cloud applications. . Cloud Service: | Azure Cloud Services is an example of a platform as a service (PaaS). Like Azure App Service, this technology is designed to support applications that are scalable, reliable, and inexpensive to operate. . . Two types of Azure Cloud Services roles. The only difference between the two is how your role is hosted on the VMs: | Web role: Automatically deploys and hosts your app through IIS. . | Worker role: Does not use IIS, runs your app standalone. . | . A cloud service is created from three components, the service definition (.csdef), the service config (.cscfg), and a service package (.cspkg). Both the ServiceDefinition.csdef and ServiceConfig.cscfg files are XML-based and describe the structure of the cloud service and how it’s configured; collectively called the model. The ServicePackage.cspkg is a zip file that is generated from the ServiceDefinition.csdef and among other things, contains all the required binary-based dependencies. Azure creates a cloud service from both the ServicePackage.cspkg and the ServiceConfig.cscfg. . Once the cloud service is running in Azure, you can reconfigure it through the ServiceConfig.cscfg file, but you cannot alter the definition. . Differences between Cloud Services and Service Fabric before | Cloud Services is about deploying applications as VMs. . | Service Fabric is about deploying applications to existing VMs or machines running Service Fabric on Windows or Linux . | . Cloud Service Sample below: . . Service Fabric Sample Below: . Cloud service Architecture: . Service Fabric Architecture -for migrated ones and new development ones . Service Fabric – can be stateful or stateless, but cloud services are stateless and need to have DB for maintaining connectivity and also connections to other items through queue - but in-service fabric we don’t need Queue for connectivity. . Service Fabric architectures: . Service Fabric without migration or without queues: . . Advantages of Service Fabric: . Fast deployment times. Creating VM instances can be time consuming. In Service Fabric, VMs are only deployed once to form a cluster that hosts the Service Fabric application platform. From that point on, application packages can be deployed to the cluster very quickly. . | High-density hosting. In Cloud Services, a Worker Role VM hosts one workload. In Service Fabric, applications are separate from the VMs that run them, meaning you can deploy a large number of applications to a small number of VMs, which can lower overall cost for larger deployments. . | The Service Fabric platform can run anywhere that has Windows Server or Linux machines, whether it’s Azure or on-premises. The platform provides an abstraction layer over the underlying infrastructure so your application can run on different environments. . | Distributed application management. Service Fabric is a platform that not only hosts distributed applications, but also helps manage their lifecycle independently of the hosting VM or machine lifecycle. . | .",
            "url": "https://lkgforit.com/2020/12/23/Azure-Basics-Interview-Notes.html",
            "relUrl": "/2020/12/23/Azure-Basics-Interview-Notes.html",
            "date": " • Dec 23, 2020"
        }
        
    
  
    
        ,"post14": {
            "title": "Angularjs Interview Notes",
            "content": "AngularJS | AngularJS is a client-side JavaScript MVC framework to develop a dynamic web application. . | entirely based on HTML and JavaScript . | The ng-app directive is a starting point of AngularJS Application. It initializes the AngularJS framework automatically. AngularJS framework will first check for ng-app directive in a HTML document after the entire document is loaded and if ng-app is found, it bootstraps itself and compiles the HTML template. . | &lt;body ng-app=”myAngularApp”&gt; . | . &lt;script&gt; . var app = angular.module(‘myAngularApp’, []); . &lt;/script&gt; . Directives | | . Directive Description . ng-app | Auto bootstrap AngularJS application. | . ng-init | Initializes AngularJS variables | . ng-model | Binds HTML control’s value to a property on the $scope object. | . ng-controller | Attaches the controller of MVC to the view. | . ng-bind | Replaces the value of HTML control with the value of specified AngularJS expression. | . ng-repeat | Repeats HTML template once per each item in the specified collection. | . ng-show | Display HTML element based on the value of the specified expression. | . ng-readonly | Makes HTML element read-only based on the value of the specified expression. | . ng-disabled | Sets the disable attribute on the HTML element if specified expression evaluates to true. | . ng-if | Removes or recreates HTML element based on an expression. | . ng-click | Specifies custom behavior when an element is clicked. | . &lt;div ng-controller=”myController”&gt; . &lt;/div&gt; . &lt;script&gt; . var ngApp = angular.module(‘myNgApp’, []); . ngApp.controller(‘myController’, function ($scope) { . $scope.message = “Hello World!”; . }); . &lt;/script&gt; . $scope – inside controller . | $rootscope – overall ngapp . | . &lt;body ng-app=”myNgApp”&gt; . &lt;div ng-controller=”myController”&gt; . Enter Message: &lt;input type=”text” ng-model=”message” /&gt; &lt;br /&gt; . &lt;button ng-click=”showMsg(message)”&gt;Show Message&lt;/button&gt; . &lt;/div&gt; . &lt;script&gt; . var ngApp = angular.module(‘myNgApp’, []); . ngApp.controller(‘myController’, function ($scope) { . $scope.message = “Hello World!”; . $scope.showMsg = function (msg) { . alert(msg); . }; . }); . &lt;/script&gt; . &lt;/body&gt; . Scope object methods: | The $scope object contains various methods. The following table lists important methods of $scope object. . Method Description . $new() | Creates new child scope. | . $watch() | Register a callback to be executed whenever model property changes. | . $watchGroup() | Register a callback to be executed whenever model properties changes. Here, specify an array of properties to be tracked. | . $watchCollection() | Register a callback to be executed whenever model object or array property changes. | . $digest() | Processes all of the watchers of the current scope and its children.Â | . $destroy() | Removes the current scope (and all of its children) from the parent scope. | . $eval() | Executes the expression on the current scope and returns the result. | . $apply() | Executes an expression in angular outside the angular framework. | . $on() | Register a callback for an event. | . $emit() | Dispatches the specified event upwards till $rootScope. | . $broadcast() | Dispatches the specified event downwards to all child scopes. | . AngularJS event directives. | Event Directive . ng-blur | . ng-change | . ng-click | . ng-dblclick | . ng-focus | . ng-keydown | . ng-keyup | . ng-keypress | . ng-mousedown | . ng-mouseenter | . ng-mouseleave | . ng-mousemove | . ng-mouseover | . ng-mouseup | . built-in AngularJS services. | $anchorScroll $exceptionHandler $interval $rootScope . $animate | $filter | $locale | $sceDelegate | . $cacheFactory | $httpParamSerializer | $location | $sce | . $templateCache | $httpParamSerializerJQLike | $log | $templateRequest | . $compile | $http | $parse | $timeout | . $controller | $httpBackend | $q | $window | . $document | $interpolate | $rootElement |   | . $http is a service as an object. It includes following shortcut methods. | Method Description . $http.get() | Perform Http GET request. | . $http.head() | Perform Http HEAD request. | . $http.post() | Perform Http POST request. | . $http.put() | Perform Http PUT request. | . $http.delete() | Perform Http DELETE request. | . $http.jsonp() | Perform Http JSONP request. | . $http.patch() | Perform Http PATCH request. | . HTTP: | var promise = $http.get(“/demo/getdata”).success(onSuccess).error(onError); . $http.post(‘/demo/submitData’, { myData: ‘Hello World!’ }) . .success(onSuccess) . .error(onError); . LOG: | $log.log(‘This is log.’); . $log.error(‘This is error.’); . $log.info(‘This is info.’); . $log.warn(‘This is warning.’); . $log.debug(‘This is debugging.’); . ** 9.5. Angularjs filters:** . Filter Name Description . Number | Formats a numeric data as text with comma and fraction. | . Currency | Formats numeric data into specified currency format and fraction. | . Date | Formats date to string in specified format. | . Uppercase | Converts string to upper case. | . Lowercase | Converts string to lower case. | . Filter | Filters an array based on specified criteria and returns new array. | . orderBy | Sorts an array based on specified predicate expression. | . Json | Converts JavaScript object into JSON string | . limitTo | Returns new array containing specified number of elements from an existing array. | . Modules: | Different files: . app.js: . var myApp = angular.module(“myApp”, []); . myController.js: . myApp.controller(“myController”, function ($scope) { . $scope.message = “Hello Angular World!”; . }); . Forms: | &lt;form ng-submit=”submitStudnetForm()” &gt; . &lt;label for=”firstName” &gt;First Name: &lt;/label&gt;&lt;br /&gt; . &lt;input type=”text” id=”firstName” ng-model=”student.firstName” /&gt; &lt;br /&gt; . &lt;label for=”gender” &gt;Gender&lt;/label&gt; &lt;br /&gt; . &lt;select id=”gender” ng-model=”student.gender”&gt; . &lt;option value=”male”&gt;Male&lt;/option&gt; . &lt;option value=”female”&gt;Female&lt;/option&gt; . &lt;/select&gt;&lt;br /&gt; &lt;br /&gt; . &lt;input type=”submit” value=”Submit” /&gt; . &lt;input type=”reset” ng-click=”resetForm()” value=”Reset” /&gt; . &lt;/form&gt; . AngularJS includes the following validation directives. | Directive Description . ng-required | Sets required attribute on an input field. | . ng-minlength | Sets minlength attribute on an input field. | . ng-maxlength | Sets maxlength attribute on an input field. Setting the attribute to a negative or non-numeric value, allows view values of any length. | . ng-pattern | Sets pattern validation error key if the ngModel value does not match the specified RegEx expression. | . Route: | var app = angular.module(‘ngRoutingDemo’, [‘ngRoute’]); . app.config(function ($routeProvider) { . $routeProvider.when(‘/’, { . templateUrl: ‘/login.html’, . controller: ‘loginController’ . }).when(‘/student/:username’, { . templateUrl: ‘/student.html’, . controller: ‘studentController’ . }).otherwise({ . redirectTo: “/” . }); . app.controller(“loginController”, function ($scope, $location) { . $scope.authenticate = function (username) { . // write authentication code here.. . $location.path(‘/student/’ + username) . }; . }); . app.controller(“studentController”, function ($scope, $routeParams) { . $scope.username = $routeParams.username; . }); . Exception Handling: | app.config(function ($provide) { . $provide.decorator(‘$exceptionHandler’, function ($delegate) { . return function (exception, cause) { . $delegate(exception, cause); . alert(‘Error occurred! Please contact admin.’); . }; . }); . }); .",
            "url": "https://lkgforit.com/2020/12/23/Angularjs-Interview-Notes.html",
            "relUrl": "/2020/12/23/Angularjs-Interview-Notes.html",
            "date": " • Dec 23, 2020"
        }
        
    
  
    
        ,"post15": {
            "title": "Asp.net Mvc Interview Notes",
            "content": "MVC: | MVC stands for Model, View and Controller. MVC separates application into three components - Model, View and Controller. . Model: Model represents shape of the data and business logic. It maintains the data of the application. Model objects retrieve and store model state in a database. | . Model is a data and business logic. | . View: View is a user interface. View display data using model to the user and also enables them to modify the data. | . View is a User Interface. | . Controller: Controller handles the user request. Typically, user interact with View, which in-turn raises appropriate URL request, this request will be handled by a controller. The controller renders the appropriate view with the model data as a response. . ActionResult | | . Result Class Description . ViewResult | Represents HTML and markup. | . EmptyResult | Represents No response. | . ContentResult | Represents string literal. | . FileContentResult/FilePathResult/ FileStreamResult | Represents the content of a file | . JavaScriptResult | Represent a JavaScript script. | . JsonResult | Represent JSON that can be used in AJAX | . RedirectResult | Represents a redirection to a new URL | . RedirectToRouteResult | Represent another action of same or other controller | . PartialViewResult | Returns HTML from Partial view | . HttpUnauthorizedResult | Returns HTTP 403 status | . Action verbs: | Http method Usage . GET | To retrieve the information from the server. Parameters will be appended in the query string. | . POST | To create a new resource. | . PUT | To update an existing resource. | . HEAD | Identical to GET except that server do not return message body. | . OPTIONS | OPTIONS method represents a request for information about the communication options supported by web server. | . DELETE | To delete an existing resource. | . PATCH | To full or partial update the resource. | . ViewData VS ViewBag VS TempData: |   . ViewData ViewBag TempData . It is Key-Value Dictionary collection | It is a type object | It is Key-Value Dictionary collection | . ViewData is a dictionary object and it is property of ControllerBase class | ViewBag is Dynamic property of ControllerBase class. | TempData is a dictionary object and it is property of controllerBase class. | . ViewData is Faster than ViewBag | ViewBag is slower than ViewData | NA | . ViewData is introduced in MVC 1.0 and available in MVC 1.0 and above | ViewBag is introduced in MVC 3.0 and available in MVC 3.0 and above | TempData is also introduced in MVC1.0 and available in MVC 1.0 and above. | . ViewData also works with .net framework 3.5 and above | ViewBag only works with .net framework 4.0 and above | TempData also works with .net framework 3.5 and above | . Type Conversion code is required while enumerating | In depth, ViewBag is used dynamic, so there is no need to type conversion while enumerating. | Type Conversion code is required while enumerating | . Its value becomes null if redirection has occurred. | Same as ViewData | TempData is used to pass data between two consecutive requests. | . It lies only during the current request. | Same as ViewData | TempData only works during the current and subsequent request | . In the case of the MVC internal DynamicViewDataDictionary class - it ultimately ends up binding to this: . public override bool TryGetMember(GetMemberBinder binder, out object result) . { . result = this.ViewData[binder.Name]; . return true; . } . For var a = ViewBag.Foo . And . public override bool TrySetMember(SetMemberBinder binder, object value) . { . this.ViewData[binder.Name] = value; . return true; . } . For ViewBag.Foo = Bar; . In other words - the statements are effectively being rewritten to wrappers around the dictionary indexer. . Because of that, there’s certainly no way it could be faster than doing it yourself. . Tempdata – peek and keep . Peek – reads it and mark it for non deletion . | Keep – mark it for non deletion. . | Just read tempdata it will mark it for deletion. . | .",
            "url": "https://lkgforit.com/2020/12/23/ASP.NET-MVC-Interview-Notes.html",
            "relUrl": "/2020/12/23/ASP.NET-MVC-Interview-Notes.html",
            "date": " • Dec 23, 2020"
        }
        
    
  
    
        ,"post16": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://lkgforit.com/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post17": {
            "title": "Unable to download pipeline artifacts in Azure Devops Download artifacts task",
            "content": ". Unable to download pipeline artifacts in Azure Devops Download artifacts task . When build artifacts are published using publish build artifacts in azure devops yaml pipeline got error that unsupported artifact type is passed when downloading with Download Artifacts task. . steps: . script: ./buildSomething.sh | task: CopyFiles@2 inputs: contents: ‘_buildOutput/**’ targetFolder: $(Build.ArtifactStagingDirectory) | task: PublishBuildArtifacts@1 inputs: pathToPublish: $(Build.ArtifactStagingDirectory) artifactName: MyBuildOutputsWe can’t download those artifacts using download artifacts task below. steps: | download: current artifact: WebApp | . Because above two are different, one is pipeline artifacts and another one is build artifacts. . Below is task if you want to publish and download Build artifacts both should be used as a combination pair if the combination changed it won’t work. . Combination One: . Publish Build artifacts: . steps: . script: ./buildSomething.sh | task: CopyFiles@2 inputs: contents: ‘_buildOutput/**’ targetFolder: $(Build.ArtifactStagingDirectory) | task: PublishBuildArtifacts@1 inputs: pathToPublish: $(Build.ArtifactStagingDirectory) artifactName: MyBuildOutputs | . Download Build artifacts . task: DownloadBuildArtifacts@0 inputs: buildType: ‘current’ downloadType: ‘single’ artifactName: MyBuildOutputs downloadPath: ‘$(System.ArtifactsDirectory)’ | . Combination Two: . For using pipeline artifacts for publish and download. . Publish pipeline artifacts . steps: . publish: $(System.DefaultWorkingDirectory)/bin/WebApp artifact: WebApp | . Download pipeline artifacts . steps: . download: current artifact: WebApp | . Thanks. .",
            "url": "https://lkgforit.com/markdown/2020/01/14/download-artifacts-devops.html",
            "relUrl": "/markdown/2020/01/14/download-artifacts-devops.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post18": {
            "title": "Troubleshooting by writing logs at the application start for .NET core app using Serilog",
            "content": ". .NET core 3.1 app may fail to start, and any logging integration implemented in startup using a middleware or anything wont log the errors for the exception occurring at the app start. . To troubleshoot this, we will write log at the Program.cs and startup.cs using Serilog. . Install Serilog related items from Nuget: . &lt;PackageReference Include=”Serilog” Version=”2.10.0” /&gt; . &lt;PackageReference Include=”Serilog.AspNetCore” Version=”3.4.0” /&gt; &lt;PackageReference Include=”Serilog.Sinks.File” Version=”4.1.0” /&gt; . Initialize the Serilog using below hightlighted code in Main method in Program.cs. . And call UseSerilog() method when setting up the HostBuilder. . Thats all we must do for setting up the Serilog for logging at app start up logs. Now you can call the Log.Error or Log.Information from the application it will log it in the file and in console if application called from console. If deployed in Azure App Service this log will come in the LogStream option also. . For App Service log at console feature in Azure App Service refer this article. . namespace SampleStartupLog { using System; using Serilog; public class Program { public static void Main(string[] args) { ** Log.Logger = new LoggerConfiguration() .WriteTo.File( @”D: home LogFiles Application myapp.txt”, fileSizeLimitBytes: 1_000_000, rollOnFileSizeLimit: true, shared: true, flushToDiskInterval: TimeSpan.FromSeconds(1)) .WriteTo.Console() .CreateLogger();** try { CreateHostBuilder(args).Build().Run(); } catch (Exception ex) { Log.Error(ex.Message + ex.StackTrace); } finally { Log.CloseAndFlush(); } } public static IHostBuilder CreateHostBuilder(string[] args) =&gt; Host.CreateDefaultBuilder(args) .UseSerilog() .ConfigureAppConfiguration((hostContext, config) =&gt; { var env = hostContext.HostingEnvironment; config.SetBasePath(env?.ContentRootPath) .AddEnvironmentVariables(); }) .ConfigureWebHostDefaults(webHostBuilder =&gt; { HostBuilderService hostBuilderService = new HostBuilderService(webHostBuilder); webHostBuilder.UseStartup(); }) .UseDefaultServiceProvider((context, options) =&gt; { options.ValidateScopes = context.HostingEnvironment.IsDevelopment(); options.ValidateOnBuild = true; }); } } . Thanks. .",
            "url": "https://lkgforit.com/markdown/2020/01/14/Troubleshooting-appstart-by-writing-logs.html",
            "relUrl": "/markdown/2020/01/14/Troubleshooting-appstart-by-writing-logs.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post19": {
            "title": "Troubleshooting HTTP Error 500.30 — ANCM In-Process Start Failure for .NET core App deployed in Azure App service using logging",
            "content": "In .NET Core 3.1 created a simple api and published in Azure App Service which was giving the following error: HTTP Error 500.30 — ANCM In-Process Start Failure. . I have enabled logging using Azure Application Insights but still I didn’t get any logs in Application Insights for this failure. . The reason is the api is not started itself as per below description in Microsoft portal: . The worker process fails. The app doesn’t start. . The ASP.NET Core Module attempts to start the .NET Core CLR in-process, but it fails to start. The cause of a process startup failure can usually be determined from entries in the Application Event Log and the ASP.NET Core Module stdout log. . Common failure conditions: . The app is misconfigured due to targeting a version of the ASP.NET Core shared framework that isn’t present. Check which versions of the ASP.NET Core shared framework are installed on the target machine. . | Using Azure Key Vault, lack of permissions to the Key Vault. Check the access policies in the targeted Key Vault to ensure that the correct permissions are granted. . | . We are not getting the configured Application insights logging because the app itself is not started and the configuration of app insights is not initiated. . To see what’s failing on the startup on the app service we don’t need to write or integrate any other logging components just the Console log using console.writeline is sufficient for logging the error on the startup.cs or program.cs like below: . Program.cs public class Program { public static void Main(string[] args) { try { CreateHostBuilder(args).Build().Run(); } catch (Exception ex) { Console.WriteLine(ex.Message + ex.StackTrace); } } Startup.cs public Startup(IConfiguration configuration) { try { this.Configuration = configuration; } catch (Exception ex) { Console.WriteLine(ex.Message + ex.StackTrace); } } . Now we have a question where to see this log after deploying to the Azure App Service — In Azure App service there is an Console under where you have to initiate your application as an exe like below: . yourapplicationName.exe . sample image shown below: . . You will get the logs in the above console, so that you can see it and fix it. . Refer this article for writing log using Serilog at app start into a file or console or both. . Happy Coding :) . Thanks, . Sanjeevi Subramani .",
            "url": "https://lkgforit.com/markdown/2020/01/14/Troubleshooting-Http-error-500-Process-Failure.html",
            "relUrl": "/markdown/2020/01/14/Troubleshooting-Http-error-500-Process-Failure.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post20": {
            "title": "How to use Paperbits Open source Drag and drop Content builder and free static website generator to develop a website and host it in GitHub pages freely — Part II (Detailed steps)",
            "content": "This is a part-II article continuing this part-I, Here you will see detailed steps for working in Paperbits framework. . This Paperbits framework is used in Azure API Management Developer portal, so you can use this article to Customize the Developer portal. . For exploring this Paperbits framework and also to contribute someone with the website, I have contributed this Youtube Channel to have an website developed using Paperbits framework for free as an contribution to education. . You can find that website here: https://tnpscquickies.com which is completely developed by this framework and hosted in GitHub pages freely. Follow this tutorial for the detailed steps for the same. . After following Part-I article clone of the Paperbits repo and running the application locally using npm start command a portal will open like the image below at url: http://localhost:8080/ . . In the above image the highlighted ones are the menu to edit the website. . . Above image shows the pages menu, where you can add a page or edit a page properties, if we select a page it will show like below menu to edit title and link of the page(URL) and also will show the current page in editor to edit the content. . . Hereafter will use screenshots from the custom site I developed. To add/manage any image click on media menu like below: . . Layouts menu is the next one where you can edit the layout which will apply to many pages which will be common — we have Home page layout and other layouts for other pages. . . Then Navigation menu is used for add/manage the menus. . . And in settings you can manage the site header and icon for site. . . And the last menu is the Styles which is a single place for all the styles of the site which can be configurable like Fonts, Typography, Colors, Gradients, Form Controls, buttons and Cards: . . . . We can add menu like this: . . After doing any edit click on save button highlighted below: . . Then an json file will download copy the file and replace it in the following file: src data demo.json, now your website will reload or click F5 to refresh the changes. . Editing a Page: . Select a page in pages menu, then you can add a section like on hover of your mouse in center of a section you can see plus sign highlighted in green below for adding section and for editing any section click edit icon highlighted in red below. . . On click of add section following window will open where you can select section with different type of widgets showing empty widgets. . . on clicking blocks you will see predefined templates of blocks which can be reused . . To add an block to saved one select any customized blocks like below and click highlighted plus button in yellow . . Give it a name in the window opened . . Now on adding section you will find that custom block in saved section like below, which you can reuse it: . . You can edit the background of Section by clicking on edit of section and then selecting background with colors or gradients. . . . . I have selected the gradient for overall website here. . You can edit the content of the widget on clicking edit button of an widget . . Similar to adding an section we can add an widget like below plus button which shows on hover of an widget in block, where you can add button, testimonials, menu, card, collapsible panel, search website, Textblock and Forms. . . Inside a card we can add picture select it from media library we added in menu or upload new one and adjust properties of it, like below: . . Final website is available here: . https://tnpscquickies.com . For your reference I have placed the whole customized website code along with Paperbits source code in the repo: SSanjeevi/Paperbits-Clone-Sample-TNPSCQuickies This repository contains an example of how using Paperbits you can enable advanced content authoring tools in your web…github.com . Its hosted in the following public repository as GitHub pages: SSanjeevi/BlazorAppClient Contribute to SSanjeevi/BlazorAppClient development by creating an account on GitHub.github.com . There you can refer i have added the following files in addition to the website files generated from Paperbits framework: . nojekyll . | 404.html . | CNAME . | . In order for the custom host website to work. .",
            "url": "https://lkgforit.com/markdown/2020/01/14/Paperbits-free-static-website-part2.html",
            "relUrl": "/markdown/2020/01/14/Paperbits-free-static-website-part2.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post21": {
            "title": "How to use Paperbits Open source Drag and drop Content builder and free static website generator to develop a website and host it in GitHub pages freely — Part I",
            "content": "Below things needed for the developer environment. . Pre requisites: . Nodejs . | Visual studio code or any code editor . | . For hosting we will use GitHub Pages, steps at the end of tutorial. . Follow the getting started tutorial in the portal important steps added here: . Run the below commands in Visual studio code terminal or in cmd line. . Clone the demo project from GitHub: git clone https://github.com/paperbits/paperbits-demo.git . | Switch into just cloned directory: cd paperbits-demo . | Install packages required for work: npm install . | Run demo site: npm start . | Now you will be able to see an application running in the localhost port 3000 or other local ports. . Now you can drag and drop sections, elements, widget, tiles and design the website easily. | . Above image shows the section with background image in editor. . After the design changes click on save button you can see the json file downloaded. . Replace that file contents into the demo.json file in the solution folder : src/data. . Publish modified content npm run publish . | If you run this command, it will generate a static website in **./dist/website/ **folder of the project. . Then upload that folder into the GitHub repo you created newly and then in settings of GitHub repo change it to website and point it to master branch. . All these steps are better explained in the following version of this article: . https://medium.com/lkg-in-it/how-to-use-paperbits-open-source-drag-and-drop-content-builder-and-free-website-generator-to-3f94acd13aef . That’s all now you have created a website for free with free hosting with speed loading from GitHub. . Below is the Paperbits framework portal : . https://paperbits.io . GitHub repo: https://github.com/paperbits .",
            "url": "https://lkgforit.com/markdown/2020/01/14/Paperbits-Static-website-part-1.html",
            "relUrl": "/markdown/2020/01/14/Paperbits-Static-website-part-1.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post22": {
            "title": "Azure API Management deployment using Azure Devops CI-CD Pipeline using ARM templates and Yaml file",
            "content": "Here am going to cover how to automate Azure API management deployment using Azure Devops CI-CD Pipeline using the Creator tool from this Github repo. . Azure API Management Devops Creator tool(Open source) is an command line tool for generating ARM templates so that we can use that in the Azure Devops pipeline to deploy to Azure. . It takes an valid.yml, Swagger.json files for each api(for each version), policy.xml file for each apis, globalpolicy.xml file and Backendurls.json file for generating ARM templates with resource details of API Management. . Valid.yml file contains the api details like below: . apiVersionSets: #version sets of the apis . id: 1 displayName: Api 1 description: api 1 versioningScheme: Query #query string will contain api-version with value of version versionQueryName: api-version apis: | name: api1 # this name should be unique and this field name is the key value used in backendurl parameters file for updating the api url as a parameter json file type: http displayName: API 1 description: serviceUrl: #we are parameterizing this url in backendurl parameter input json file openApiSpec: ‘./apis/api1/1.0/Swagger.json’ #swagger file path policy: ‘./apis/api1/1.0/apiServicePolicy.xml’ #service level policy.xml file path suffix: api1 subscriptionRequired: true isCurrent: true apiVersion: apiVersion Description: api 1 revision 1 apiVersionSetId: 1 apiRevision: 1 apiRevisionDescription: products: sampleproduct tags: diagnostic: | . Creator tool Parameterized values are Backend urls, Appinsights, Appinsights Instrumentation key which will change for each environments. . Usage: . dotnet tool run apim-templates create — appInsightsInstrumentationKey $(VariableAppinsightsInstrumentationKey) — appInsightsName $(VariableAppinsightsName) — configFile “./valid.yml” — backendurlconfigFile “./TemplateAndParameters/BackendUrlParameters.json” . where VariableAppinsightsInstrumentationKey, VariableAppinsightsName are variables we can pass in pipeline variables and the valid.yml file with api definition and description details, the Backendulrparameters.json file with urls of all the apis. . Sample valid.yml file . Sample BackendUrl.json file . Below is the sample solution structure i have used for this pipeline input : . . Below is the sample yaml file used in Azure Devops pipeline. . . You can refer the files in this github repo: SSanjeevi/APIM-Devops-Sample-Pipeline You can’t perform that action at this time. You signed in with another tab or window. You signed out in another tab or…github.com . Thanks, . Sanjeevi Subramani .",
            "url": "https://lkgforit.com/markdown/2020/01/14/API-management-automation-ci-cd.html",
            "relUrl": "/markdown/2020/01/14/API-management-automation-ci-cd.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Us",
          "content": "This website is for beginners in Information Technology 1. . a blogging platform that gives basic explanation on Information Technology. &#8617; . |",
          "url": "https://lkgforit.com/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://lkgforit.com/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}